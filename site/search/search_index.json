{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"learn2proGrAME Tutorial","text":"<p>Spiele programmieren mit C# in Unity - Tutorial</p>"},{"location":"#was-ist-learn2programe","title":"Was ist learn2proGrAME?","text":"<p>Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen.</p> <p>Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich.</p> <p>Die Lernmaterialen stehen als Open Educational Ressources frei zu Verwendung und Ver\u00e4nderung verf\u00fcgbar, die Lizenzen sind im Kapitel \u00dcber learn to proGrAME angef\u00fchrt.</p> <p>Viel Spass beim Spiele entwickeln!</p>"},{"location":"#was-wirst-du-in-diesem-tutorial-lernen","title":"Was wirst du in diesem Tutorial lernen?","text":"<p>In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C# Download Unity. Wir haben die meisten Teile des Tutorials mit Unity Version 5.6.2f1 erstellt und getestet.</p> <ul> <li>Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden.</li> <li>Danach schreibst du dein erstes Programm in C#.</li> <li>Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging.</li> <li>Anschlie\u00dfend lernst du \u00fcber Variablen und Operatoren, um dein erstes Spiel, das allseits beliebte Krapfenklicker, zu entwickeln.</li> <li>Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben.</li> <li>Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen.</li> <li>Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt.</li> <li>Letztlich werden die Grundlagen objekt-orientierter Programmierung vorgestellt.</li> </ul>"},{"location":"#bouncyfant-tutorial","title":"BouncyFant-Tutorial","text":"<p>Im BouncyFant-Tutorial wirst du folgendes lernen:</p> <ul> <li>Dateimanagement in Unity</li> <li>Spielobjekt-Animation in Unity</li> <li>Spielobjektkomponente Rigidbody2D</li> <li>Spielobjekte bewegen</li> <li>Springen mit Hilfe von Vektoren</li> <li>Kollisionsabfrage in Unity</li> <li>Objekt-orienterte Programmierung: Vererbung, Kapselung</li> </ul>"},{"location":"#spaceasteroids-tutorial","title":"SpaceAsteroids-Tutorial","text":"<p>Space Asteroids ist ein Spiel indem du in einem Raumschiff im All durch ein Asteroidenfeld fliegst.</p> <p>Im SpaceAsteroids-Tutorial wirst folgendes lernen:</p> <ul> <li>Funktionen anderer Objekte aufrufen</li> <li>Kollisionsabfrage in Unity</li> <li>Spielobjekte zur Laufzeit l\u00f6schen</li> <li>Partikelsysteme erstellen</li> <li>Fertige Partikelsysteme in das Spiel einbauen</li> </ul>"},{"location":"#warum-verwenden-wir-die-unity-engine","title":"Warum verwenden wir die Unity Engine?","text":"<p>Wir verwenden die Unity Engine, weil sie viele Features von Haus aus eingebaut hat die wir f\u00fcr die Erstellung eines Spiels brauchen. Somit k\u00f6nnen wir uns mehr auf das Design von unserem Spiel und die grundlegende Programmierung konzentrieren. Unity hat zum Beispiel bereits eine richtig coole Physik Engine eingebaut, mit der wir lustige Effekte in unserem Spiel erschaffen k\u00f6nnen.</p> <p>Die Unity Engine wird auch von professionellen Spielentwicklern verwendet. So wurden zum Beispiel das Online Kartenspiel \u201eHearthstone\u201c von Blizzard und das beliebte Handygame \u201eTemple Run\u201c mit Unity erstellt.</p>"},{"location":"about/0290-about/","title":"\u00dcber learn2proGrAME","text":""},{"location":"about/0290-about/#lizenzen","title":"Lizenzen","text":"<p>Die erstellten Inhalte sind als Open Educational Ressources konzipiert und stehen unter unterschiedlichen freien Lizenzen zur Verf\u00fcgung. Die im Zuge des Projekt erstellten Texte sowie die selbst erstellten Grafiken (die Elefanten, Kisten, Kugeln, Wolken) stehen unter Creative Commons  - Attribution-NonCommercial 4.0 International (CC BY-NC 4.0) Lizenz: This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</p> <p>Die freien Inhalte von GameArt2D (der Hintergrund, die Plattformen, der Pilz) stehen unter CC0 1.0 Universal (CC0 1.0) Public Domain Dedication see www.gameart2d.com/license.html.</p> <p>Im Spiel SpaceAsteroids werden teils Assets von opengameart.org verwendet. Diese Assets stehen unter CC0 bzw. CC-BY 3.0. Details hier</p>"},{"location":"about/0290-about/#das-projekt","title":"Das Projekt","text":"<p>Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern?</p> <p>Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind).</p> <p>Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen.</p> <p>Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c</p> <p> </p>"},{"location":"bouncyfant/T00-introduction/","title":"Tutorial - Let\u2019s make a Bouncy Fant Game!","text":""},{"location":"bouncyfant/T00-introduction/#einleitung","title":"Einleitung","text":"<p>Hallo und herzlich willkommen beim learn to proGrAME-Tutorial. Hier lernst du, wie du dein erstes 2D-Spiel mit der Unity Engine entwickelst. Damit du einen einfachen und problemlosen Einstieg in das Thema hast werden wir das Spiel \"BouncyFant\" selber versuchen nachzuprogrammieren.</p>"},{"location":"bouncyfant/T00-introduction/#uber-das-tutorial","title":"\u00dcber das Tutorial","text":"<p>In diesem Tutorial wirst du dich mit Unity und einigen Abschnitten Programmcode vertraut machen. Nach dem Absolvieren des Tutorials wird dir mehr Freiraum gegeben eigenst\u00e4ndig zu entwickeln.</p> <p>Tipp</p> <p>Wenn du dir nicht sicher bist, ob du ein Wort richtig verstehst, schau bitte zuerst im Glossar selbst nach. Unsere Videos auf dem Youtube Kanal helfen dir bei schwierigen Abschnitten. Sollte etwas schief laufen, kannst du nat\u00fcrlich nachfragen. F\u00fcr Notf\u00e4lle ist nach jedem Kapitel auch ein Link zu einer Projekt-Datei mit dem jeweiligen Fortschritt vorhanden.</p>"},{"location":"bouncyfant/T00-introduction/#grundlegende-infos","title":"Grundlegende Infos","text":"<p>Zum Programmieren ben\u00f6tigt man Entwicklungswerkzeuge, wie einen Compiler, einen Assembler oder einen Interpreter. Wichtig ist ein Editor, mit dem man den Quellcode schreibt (z.B. Notepad++, TextWrangler, Sublime, Geany, ...). Diese Entwicklungswerkzeuge k\u00f6nnen getrennt voneinander oder in einem Gesamtpaket eingesetzt werden. Wird ein Gesamtpaket verwendet, spricht man von einer integrierten Entwicklungsumgebung (auf Englisch: \u201cIntegrated Development Environment\u201d  oder kurz: IDE). Wir verwenden in diesem Tutorial Unity 5.6.2. Genaugenommen sind das sogar zwei IDEs, die zu einem Paket zusammengeschn\u00fcrt wurden: Die Unity-IDE und Visual Studio Community Edition. F\u00fcr dieses Tutorial solltet ihr daher Unity und Visual Studio installiert haben. Wir verwenden die englische Version von Unity. Au\u00dferdem gibt es f\u00fcr die Version im Internet auch mehr Tutorials. Solltest du eine andere Version installiert haben, keine Sorge, alles was du hier tust funktioniert auch in deiner Version, aber vielleicht sehen ein paar Dinge anders aus.</p> <p> Abbildung: Unity IDE mit einem Snake-Spiel  Abbildung: Microsoft Visual Studio Community Edition</p>"},{"location":"bouncyfant/T00-introduction/#das-spiel","title":"Das Spiel","text":""},{"location":"bouncyfant/T00-introduction/#die-hintergrundstory","title":"Die Hintergrundstory","text":""},{"location":"bouncyfant/T00-introduction/#bouncy-fant-der-anfang","title":"Bouncy Fant - Der Anfang","text":"<p>Der verr\u00fcckte Dr. Scramblewood hat ein Netzwerk aus Maschinen entworfen, mit dem er die Gesetze der Physik kontrollieren und ver\u00e4ndern kann. Diese Maschinen konnte er jedoch nur an einem Ort installieren, an dem sie unentdeckt blieben und der von anderen Menschen weit, weit entfernt war. Jener Ort war ein unbekanntes St\u00fcck Regenwald in Zentralafrika und die Heimat der h\u00f6chst seltenen, aber intelligenten Miniatur-Elefanten,  die sich selbst, wegen ihres elastischen K\u00f6rperbaus und ihrer F\u00e4higkeit sehr hoch springen zu k\u00f6nnen, Bouncy Fants nennen. Dr. Scramblewoods finsterer Plan ist es, mit Hilfe seiner Maschinen s\u00e4mtliche B\u00e4ume zu entwurzeln und dem Waldboden seine Bodensch\u00e4tze zu entrei\u00dfen. Nur mit den Diamanten und Edelmetallen, die er aus dem Regenwaldboden mit seinen Maschinen extrahiert, kann er die enormen Ressourcen aufbringen, um ein noch m\u00e4chtigeres Geflecht aus Maschinen zu bauen, das letztendlich die physikalischen Gesetze auf dem ganzen Planeten durcheinander bringen und ihm zur Herrschaft \u00fcber die Welt verhelfen soll. Die Tiere des Waldes sind verzweifelt und bef\u00fcrchten, dass sie alle sterben m\u00fcssen. Doch zwei junge Bouncy Fants wollen die Hoffnung nicht aufgeben. Die Elefanten Elli und Ossi machen sich auf den Weg, um Dr. Scramblewood zu stoppen und den Regenwald und die ganze Welt zu retten. Die zwei Elefanten m\u00fcssen auf ihren Abenteuern magische Gegenst\u00e4nde finden, hilfsbereite Tiere befragen und Teile des t\u00f6dlichen Geflechts von Dr. Scramblewood Maschinen zerst\u00f6ren.</p>"},{"location":"bouncyfant/T00-introduction/#das-spielprinzip","title":"Das Spielprinzip","text":"<p>Im Spiel geht es geht darum, einen Elefanten m\u00f6glichst schnell durch eine Welt, in der \u00fcbertriebene und unglaubliche physikalische Gesetze gelten, zu steuern. W\u00e4hrend unterschiedliche Gegenst\u00e4nde von oben auf die Bouncy Fants herabprasseln, m\u00fcsst ihr versuchen einen seltenen Gegenstand (z.B. einen magischen Pilz) zu erreichen. Wer zuerst den magischen Pilz erreicht, hat gewonnen.</p> <p> Abbildung: Unser Spiel: Bouncy Fant</p>"},{"location":"bouncyfant/T00-introduction/#optional-erstelle-eine-eigene-spielfigur","title":"Optional: Erstelle eine eigene Spielfigur","text":"<p>Du kannst mit Gimp, der gratis verf\u00fcgbaren Alternative zu Photoshop, gute Grafiken f\u00fcr dein Projekt erstellen. Du kannst dieses Tutorial auch mit dem vorgegebenen Elefanten durcharbeiten oder dir jetzt einen eigene Spielfigur zeichnen.</p> <p>Mehr zum Erstellen einer Spielfigur findest du in unserem GIMP-Tutorial oder auf unserem Youtube-Channel: learn to proGrAME Tutorial Videos.</p>"},{"location":"bouncyfant/T01-adassets/","title":"Teil 1 - Neues Projekt erstellen und Assets einf\u00fcgen","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du wie du ein Unity Projekt erstellst und deine erste Grafik (\"Sprite\") in dein Spiel einf\u00fcgst.</p> In diesem Kapitel wirst du... Den Arbeitsbereich kennenlernen. Ordner im Asset-Bereich hinzuf\u00fcgen. Neue Assets zu deinem Projekt hinzuf\u00fcgen. Einen komplexen Sprite zerteilen. Einen Sprite zu deinem Spiel hinzuf\u00fcgen. <p>Wenn du Unity startest, erscheint zuerst ein Startfenster. Klicke dort auf \u201cNEW\u201d. Im sp\u00e4teren Verlauf des Projekts, kannst du einfach auf dein Projekt in der Liste klicken, oder es \u00fcber \u201cOPEN\u201d \u00f6ffnen.</p> <p></p> <p>Gib bei den erweiterten Einstellungen einen sinnvollen Namen (z.B. BouncyFant) ein. Ganz wichtig ist es, beim Projekttyp \u201c2D\u201d auszuw\u00e4hlen. <p></p> <p>Achtung!</p> <p>Es kann sein, dass an deiner Schule Netzwerklaufwerke verwendet werden und du dein Projekt deswegen unter einem bestimmten Laufwerk (bzw. Pfad) abspeichern musst, damit du es sp\u00e4ter nicht verlierst. Frag am besten deine Lehrperson deswegen.</p> <p>Sobald du den Speicherpfad, den Namen und \u201e2D\u201c ausgew\u00e4hlt hast, kannst du bereits auf \u201cCreate project\u201d klicken.</p>"},{"location":"bouncyfant/T01-adassets/#arbeitsbereich-kennenlernen-und-konfigurieren","title":"Arbeitsbereich kennenlernen und konfigurieren","text":"<p>Dieser Abschnitt wiederholt denjenigen aus dem Grundlagentutorial.</p> <p>In Unity gibt es 3 wichtige Bereiche, die wir \u00fcber den Verlauf des Tutorials sehr oft verwenden werden. Wir empfehlen dir, dass du dir ein paar Minuten nimmst und dich mit ihnen vertraut machst.</p>"},{"location":"bouncyfant/T01-adassets/#hierarchy-panel","title":"Hierarchy Panel","text":"<p>Das Hierarchy Panel ist sozusagen eine \u00dcbersicht \u00fcber alle Game Objects , die wir zu unserem Spiel hinzugef\u00fcgt haben. Es ist eine Hierarchie, weil wir manchmal mehrere Game Objects zusammenpacken wollen. Eine Plattform auf der deine Figur springt k\u00f6nnte zum Beispiel aus mehrere Teilen bestehen, die wir dann auch zusammenpacken wollen.</p>"},{"location":"bouncyfant/T01-adassets/#inspector-panel","title":"Inspector Panel","text":"<p>Im Inspector Panel k\u00f6nnen wir die Game Objects, die wir unserem Spiel hinzugef\u00fcgt haben genauer inspizieren, daher auch der Name. Dort kannst du sogenannte Komponenten des ausgew\u00e4hlten Game Objects hinzuf\u00fcgen, entfernen und konfigurieren. Diese Komponenten erlauben uns coole Dinge wie zum Beispiel, eine Figur zu steuern, sie zu animieren, sie von Dingen abprallen zu lassen und viele weitere Dinge.</p> <p>Achtung!</p> <p>Je nachdem, was du markiert hast, sind die Dinge, die im Inspector Panel angezeigt werden, andere. Wenn du etwas nicht findest, schau zuerst ob du auch die richtige Sache markiert hast.</p>"},{"location":"bouncyfant/T01-adassets/#asset-bereich","title":"Asset-Bereich","text":"<p>Der Asset-Bereich ist unsere Sammlung aller Assets, also Dateien wie zum Beispiel Scripte, Bilder oder Musik, die wir in unser Projekt einbauen m\u00f6chten. Wir m\u00fcssen neue Assets immer zuerst in unser Projekt importieren, damit wir sie verwenden k\u00f6nnen, au\u00dfer wir haben sie in Unity selbst erstellt.</p> <p>Du kannst das Aussehen des Asset-Bereichs \u00e4ndern, indem man rechts unten die Zoomleiste bewegt (siehe Screenshot). Alternativ funktioniert auch STRG + Mausrad.</p> <p></p>"},{"location":"bouncyfant/T01-adassets/#neue-ordner-und-assets-hinzufugen","title":"Neue Ordner und Assets hinzuf\u00fcgen","text":"<p>Bevor wir in Unity unsere Ordnerstruktur anlegen, laden wir uns einmal ein paar Assets  aus dem Internet herunter und speichern diese in den entsprechenden Objektordner. Die Assets, mit denen wir arbeiten werden, finden wir an folgenden Orten:</p> <ul> <li>www.comber.at/dev/assets.zip</li> <li>https://www.gameart2d.com/free-platformer-game-tileset.html</li> </ul> <p>Die Zip-Datei, die du heruntergeladen hast, musst du nat\u00fcrlich zuerst entpacken. Das kannst du mit Rechtsklick auf die Datei im Windows Explorer und dann einem Klick auf \u201cAlles extrahieren\u201d machen. Pass aber auf, wohin du die Dateien entpackst, damit du sie auch wieder findest.</p> <p>In Unity f\u00fcgen wir zuerst neue Ordner hinzu. F\u00fcr Dein Projekt brauchst du folgende Ordner:</p> <ul> <li>Material (f\u00fcr die Materialeigenschaften f\u00fcr die Physiksimulation)</li> <li>Scripts (f\u00fcr die zu programmierenden Scripte)</li> <li>Sprites (f\u00fcr die Grafiken)</li> <li>Vorlagen (f\u00fcr Spielobjekte, die wir als Vorlagen erstellen und verwenden)</li> </ul> <p>Neue Ordner legt man mit Rechtsklick in das Asset Panel und dann durch klicken auf Create -&gt; Folder an.</p> <p></p> <p>Um ein Asset zu unserem Spiel hinzuzuf\u00fcgen, m\u00fcssen wir im Asset Panel rechtsklicken und dann Import New Asset ausw\u00e4hlen. </p> <p>Im nachfolgenden Fenster navigieren wir zu dem Ordner, in dem wir unsere heruntergeladenen Spielegrafiken gespeichert haben, w\u00e4hlen unsere Spielfigur aus und klicken auf Import. (Mehr zum Erstellen einer von dir erstellten Spielgrafik findest du in unserem GIMP-Tutorial auf Moodle oder auf unserem Youtube-Channel: </p> <p>Wenn du Assets importierst werden sie in deinen Projekt Ordner kopiert. Solltest du irgendwann etwas an deinem Asset ver\u00e4ndern m\u00fcssen, musst du die Version in deinem Projekt Ordner \u00e4ndern.</p>"},{"location":"bouncyfant/T01-adassets/#das-sprite-zerschneiden","title":"Das Sprite zerschneiden","text":"<p>Wie du vielleicht schon gesehen hast, besteht unsere Elefantengrafik aus drei sehr \u00e4hnlichen Bildern. Wir nennen diese Bilder die Animationsstufen. Damit wir sp\u00e4ter die Animation (Beine, R\u00fcssel und Schwanz bewegen sich beim Gehen) f\u00fcr den Elefanten erstellen k\u00f6nnen, m\u00fcssen wir jetzt die einzelnen Animationsstufen des Elefanten aus dem Spritesheet (also unsere Elefantengrafik) extrahieren. Man kann sich das so vorstellen, als ob man das Spritesheet zerschneiden w\u00fcrde. Bevor wir jedoch mit dem Zerschneiden des Spritesheets anfangen k\u00f6nnen, m\u00fcssen wir noch den Sprite Mode von Single auf Multiple \u00e4ndern. Damit teilen wir Unity mit, dass in unserem importierten Bild mehrere Animationsstufen eines Sprites vorhanden sind.</p> <p>Das Zerschneiden bewerkstelligen wir, indem wir den Elefanten-Sprite im Asset Panel markieren, und dann im Inspector Panel den Sprite Editor \u00f6ffnen.</p> <p></p> <p>Falls wir hier gefragt werden, ob wir die \u00c4nderungen annehmen wollen, klicken wir auf Apply.</p> <p></p> <p>Im Sprite Editor klicken wir nun auf Slice, um unser Spritesheet zu zerteilen. Nun gibt es mehrere M\u00f6glichkeiten ein Sprite zu zerteilen. Wenn man die Animationsstufen nebeneinander genau positioniert hat, dann ist es sinnvoll das Sprite manuell zuzuschneiden. Dazu w\u00e4hle den Modus Grid By Cell Count. In diesem Modus wird das Sprite wie in einer Tabelle in Zeilen (R steht f\u00fcr Rows) und Spalten (C steht f\u00fcr Columns) aufgeteilt. Wir haben 3 Elefanten in einer Zeile. Wenn wir uns das jetzt als Tabelle vorstellen ist klar, wir haben 1 Zeile und 3 Spalten, das hei\u00dft wir schreiben bei R 1 und bei C 3. Zum Zerteilen best\u00e4tigen wir das Ganze mit Slice.</p> <p></p> <p>Eine andere M\u00f6glichkeit ist, das Sprite automatisch zerteilen zu lassen. Dazu w\u00e4hlen wir als Type Automatic aus und dann best\u00e4tigen wir das ganze mit Slice. Das geht aber nicht immer, je nachdem welches Asset du verwendest.</p> <p></p>"},{"location":"bouncyfant/T01-adassets/#manuell-zerschneiden","title":"Manuell zerschneiden","text":"<p>Falls du dein eigenes Sprite verwendest, musst du die Einstellungen vielleicht anpassen. Es kann auch sein, dass das Ergebnis beim \u201cSlicen\u201d (=zerschneiden) nicht ganz perfekt ist. Du kannst dann auf die Animationsstufe klicken und sie mit den Blauen kreisen zurechtziehen.</p> <p></p> <p>Nach dem Slicen geben wir den einzelnen Animationsstufen im Sprite Editor noch sinnvolle Namen. Hierf\u00fcr klicken wir auf die jeweilige Animationstufe und geben den jeweiligen Namen ein, siehe Screenshot. (In unserem Fall Elefant_Stehen, Elefant_Gehen_1, Elefant_Gehen_2)</p> <p>Achtung!</p> <p>Bevor du den Sprite Editor schlie\u00dft, musst du deine \u00c4nderungen mit \u201cApply\u201d best\u00e4tigen und speichern.</p> <p>Achtung!</p> <p>Platziere deine ganzen Assets von Anfang an in den Ordner wo sie auch am Ende drin liegen sollen und gib ihnen einen eindeutigen Namen den du nicht mehr \u00e4ndern musst.</p>"},{"location":"bouncyfant/T01-adassets/#animationsstufen-benennen","title":"Animationsstufen benennen","text":""},{"location":"bouncyfant/T01-adassets/#die-spielfigur-zur-spielszene-hinzufugen","title":"Die Spielfigur zur Spielszene hinzuf\u00fcgen","text":"<p>Unser Ziel ist es jetzt, einen stehenden Elefant als GameObject dem Spiel hinzuzuf\u00fcgen. Dazu klappen wir zuerst das Sprite Elefant auf (klicke auf den kleinen Pfeil links neben Elefant im Asset Panel, im Ordner Sprites). Dann siehst du die einzelnen Animationsstufen (Elefant_Gehen_1, Elefant_Gehen_2, Elefant_Stehen). Durch Ziehen der Animationsstufe Elefant_Stehen vom Asset Panel in das Hierarchy Panel f\u00fcgen wir den Elefanten zum Spiel hinzu. Dabei wird auch gleich ein neues GameObject erstellt.</p> <p>Ist der Elefant hinzugef\u00fcgt, passen wir noch die Gr\u00f6\u00dfe an. Das k\u00f6nnen wir bewerkstelligen, indem wir das Sprite des Elefanten anklicken und im Inspector Panel bei Pixels Per Unit den Wert anpassen (in unserem Fall beispielsweise 300). Mit Apply wird das Ganze wieder best\u00e4tigt.</p> <p></p>"},{"location":"bouncyfant/T01-adassets/#speichern-der-spieleszene","title":"Speichern der Spieleszene","text":"<p>Die Spielszene m\u00fcssen wir zus\u00e4tzlich zum Projekt speichern. Du kannst dir jede Spieleszene wie ein Level vorstellen. Wir bleiben aber vorerst bei einem Level. Die Spieleszene speichert man durch einen Klick auf File-&gt;Save Scene oder mit der Tastenkombination STRG + S. Das gesamte Projekt musst du darauf noch mit File-&gt;Save Project speichern!</p> <p></p> <p>Mit der \u201cPlaytaste\u201d k\u00f6nnen wir das Spiel starten. Momentan tut sich noch nicht viel, da der Elefant sich noch nicht bewegt und auch Grafiken f\u00fcr den Hintergrund und f\u00fcr die anderen Objekte im Spiel m\u00fcssen erst hinzugef\u00fcgt werden. Wir k\u00f6nnen jedoch das Seitenverh\u00e4ltnis einstellen: Wir w\u00e4hlen bei BouncyFant das Verh\u00e4ltnis 4:3, da in dem Spiel viel gesprungen wird und wir deswegen mehr Platz nach oben, als zur Seite wollen.</p> <p></p>"},{"location":"bouncyfant/T02-animstat/","title":"Teil 2 - Animationen und \"States\"","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, wie du eine Animation f\u00fcr deine Spielfigur erstellst und sie mithilfe des \"Animation Controller\" animierst.</p> In diesem Kapitel wirst du... Benennung der Animationsstufen \u00fcberpr\u00fcfen Eine Animation erstellen. Dem AnimationsController einen geeigneten Namen geben. Einen State im AnimationsController erstellen. \u00dcberg\u00e4nge zwischen Animationen einstellen Variablen im AnimationsContoller erstellen Bedingungen f\u00fcr die \u00dcberg\u00e4nge einstellen <p>\u00dcberpr\u00fcfe, ob du, wie in Teil 1 vorgegeben, den Animationsstufen die Namen Elefant_Gehen_1, Elefant_Gehen_2 und Elefant_Stehen gegeben hast. Klicke auf dein Elefant Asset, sieh im Sprite Editor nach und benenne gegebenfalls die Animationsstufen. Wenn du im Sprite Editor die einzelnen Bilder anklickst, erscheint um den betreffenden Spriteteil ein blauer Rahmen. Im rechten Eck erscheint ein Fenster, wo oben der Name der Animationsstufe eingetragen sein soll.</p>"},{"location":"bouncyfant/T02-animstat/#states-und-animationen","title":"States und Animationen","text":"<p>Bevor wir den Elefanten am Bildschirm hin- und herbewegen wollen, legen wir zuerst die Bewegungsabl\u00e4ufe oder Animationen (Stehen und Gehen) f\u00fcr den Elefanten fest. Die Bewegungsabl\u00e4ufe sind durch unterschiedliche Zust\u00e4nde (engl. states)  gekennzeichnet.  Ein Zustand der Spielfigur ist \u201cStehen\u201d und der andere Zustand ist \u201cGehen\u201d. Solange sp\u00e4ter der Elefant mit Tasteneingaben (das kommt sp\u00e4ter) bewegt wird, befindet sich das GameObject Elefant im Zustand Gehen, und dann bewegen sich seine Beine.</p>"},{"location":"bouncyfant/T02-animstat/#animationen","title":"Animationen","text":"<p>Animationen werden erstellt, indem man das Sprite aufklappt (siehe Screenshot<sup>1</sup>), dann die gew\u00fcnschten Animationsstufen ausw\u00e4hlt und vom Projekt-Bereich auf ein Objekt im Hierarchy-Bereich zieht. Das Erstellen von Animationen funktioniert, wenn man mehrere Animationsstufen in das Hierarchy Panel zieht, in unserem Fall Elefant_Gehen_1 und Elefant_Gehen_2, automatisch.</p> <p>Du speicherst die neue Animation im Ordner Sprites und gibst ihr einen sinnvollen Namen (z.B. animElefantGehen.anim).</p> <p></p> <p></p> <p>Durch das Erstellen der Animation per Drag &amp; Drop wird automatisch ein Animations-Controller erstellt. Gib diesem einen sinnvollen Namen wie z.B. Elefant_AnimationsController </p> <p>Zus\u00e4tzlich muss noch eine Animation f\u00fcr den Zustand \u201cStehen\u201d erzeugt werden. Dies geschieht mittels Rechtsklick auf \u201cElefant_Stehen\u201d -&gt; Create -&gt; Animation.</p>"},{"location":"bouncyfant/T02-animstat/#animator","title":"Animator","text":"<p>Wenn man diesen Controller doppelt klickt \u00f6ffnet sich der Animator (Window/Animator). Im Animator sind verschiedene Zust\u00e4nde (States) und deren \u00dcberg\u00e4nge definiert.</p> <p></p> <p>Neue States kann ich mittels Rechtsklick und dann durch Klicken auf Create States -&gt; Empty hinzuf\u00fcgen (siehe Screenshot unten).</p> <p> Zuerst wollen wir einen Zustand namens Stehen erzeugen. Diesem m\u00fcssen wir die Stehen-Animation zuweisen. Dann setzen wir diesen Zustand als Standard (Klick mit der rechten Maustaste auf einen State -&gt; \u201cSet As Layer Default State\u201d). Dadurch wird der Zustand orange gekennzeichnet. Unsere Animation startet immer beim Default State. Mittels Rechtsklick auf den Zustand und Make Transition f\u00fcgt man neue \u00dcberg\u00e4nge zwischen den Zust\u00e4nden hinzu.</p> <p></p> <p>Ziel ist es, dass die Geh-Animation (die in dem entsprechenden Zustand ausgew\u00e4hlt ist) aktiv ist, wenn der Elefant bewegt wird! Am Ende wollen wir die Zust\u00e4nde und \u00dcberg\u00e4nge so wie am Screenshot unten verbunden zu haben.</p> <p></p> <p>Man nennt verbundene Zust\u00e4nde eine State Machine oder einen Zustandsautomat. Man kann sich diesen tats\u00e4chlich wie eine abgeschlossene Maschine vorstellen.</p>"},{"location":"bouncyfant/T02-animstat/#parameter","title":"Parameter","text":"<p>Um der State Machine mitzuteilen, in welcher Animationsstufe sich unsere Spielfigur gerade befindet, ben\u00f6tigen wir Parameter. Neue Parameter stellt man im Animator ein, indem man auf Parameters klickt und dann das Plus-Zeichen anklickt. Wir erstellen die Parameter Geschwindigkeit vom Typ Float (Kommazahl) und Springen vom Typ Bool (<code>true</code> \\ <code>false</code>). Da der Animator und die Code-Datei (Script) im Inspector zugewiesen sind, k\u00f6nnen Parameter sp\u00e4ter im Code verwendet werden.</p> <p></p> <p>Wenn man nun auf Play dr\u00fcckt, wechselt der Elefant von selbst alle paar Sekunden von der stehenden Animation in die Animation des Gehens. Auch wenn sich der Elefant gar nicht hin- und her bewegt, zappelt er mit den Beinen. Das ist aber etwas komisch f\u00fcr den Spieler, wenn eine Figur die Beine bewegt ohne eigentlich zu gehen.Damit sich unsere Spielfigur sp\u00e4ter im Spielen nur dann die Beine bewegt, wenn wir auch den Elefanten hin und her bewegen, m\u00fcssen wir den \u00dcbergang von von Stehen zu Gehen und von Gehen zu Stehen an eine Bedingung kn\u00fcpfen: Ist die horizontale Geschwindigkeit kleiner als 0.01, so soll der Elefant stehen. Ist die horizontale Geschwindigkeit jedoch gr\u00f6\u00dfer als 0.01, so soll die Animation f\u00fcr die Bewegung abgespielt werden. Diese Bedingungen legt man unter Conditions fest. Daf\u00fcr klickt man einfach den \u00dcbergang (blauer Pfeil im Screenshot) an und f\u00fcgt mit dem \u201c+\u201d eine neue Bedingung hinzu.</p> <p>Tipp</p> <p>Im Englischen (und somit auch Unity) wird statt eines Kommas ein Punkt f\u00fcr Dezimalzahlen verwendet. Wenn man in Unity einen Beistrich als Trennzeichen f\u00fcr Dezimalzahlen verwendet, macht das Programm automatisch einen Punkt daraus. ACHTUNG! Beim Programmieren in C# funktioniert das allerdings nicht und man muss einen Punkt verwenden.</p> <p>Um nochmal zu erl\u00e4utern: Wenn es eine Bewegung gibt, also eine Geschwindigkeit \u00fcber 0.01, \u00e4ndern wir auf die Gehen Animation, aber sobald die Bewegung endet und die Geschwindigkeit wieder unter 0.01 ist, \u00e4ndern wir zur\u00fcck auf die Stehen Animation.</p> <p>Bedingung f\u00fcr den \u00dcbergang von Stehen zu Gehen:</p> <p></p>"},{"location":"bouncyfant/T02-animstat/#einstellungen-bei-den-ubergangen","title":"Einstellungen bei den \u00dcberg\u00e4ngen","text":"<p>Bei beiden \u00dcberg\u00e4ngen m\u00fcssen wir noch ein paar Einstellungen treffen, damit die Bewegung nicht verz\u00f6gert auftritt. Has Exit Time soll nicht ausgew\u00e4hlt sein, Fixed Duration ebenso nicht, die Transition Duration und das Transition Offset sollten auf 0 gesetzt werden. Diese Optionen w\u00fcrden bewirken, dass die \u00dcbergangsbedingung an eine Zeitdauer (Duration) gekn\u00fcpft ist (Fixed Duration) oder der \u00dcbergang verz\u00f6gert oder mit einer gewissen Geschwindigkeit erfolgt (Transition Offset/Duration). Hier soll aber der Elefant sofort aufh\u00f6ren, die Beine zu bewegen, wenn er stehen bleibt.</p> <p></p> <ol> <li> <p>Anm: Wenn der Listenbereich bei euch anders aussieht dann findet ihr in Kapitel Arbeitsbereich kennenlernen und konfigurieren unter der \u00dcberschrift Listenansicht im Asset Panel den Hinweis, wie man die Ansicht umstellt\u00a0\u21a9</p> </li> </ol>"},{"location":"bouncyfant/T03-movement/","title":"Teil 3 - Bewegung","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, wie du deine Spielfigur steuerbar machen kannst. Du lernst wie man Tasten im Input Manager einstellt. Anschlie\u00dfend lernst du, wie man ein Script schreibt, \u00fcber das du deine Figur dann bewegen kannst.</p> In diesem Kapitel wirst du... Die Steuerung deiner Figur einstellen. Die RigidBody 2D Komponente zu deiner Figur hinzuf\u00fcgen. Ein Script schreiben, dass es deiner Figur erlaubt sich zu bewegen. Das Script zu deiner Spielfigur hinzuf\u00fcgen."},{"location":"bouncyfant/T03-movement/#die-bewegung-der-elefantin-implementieren","title":"Die Bewegung der Elefantin implementieren","text":"<p>Bevor wir mit der Realisierung der Bewegung starten, benennen wir unsere Spielfigur einmal um, damit wir uns sp\u00e4ter, wenn wir mehrere Figuren haben, besser orientieren k\u00f6nnen. Ich habe den Namen Elli gew\u00e4hlt. Einfach mit rechten Maustaste draufklicken und auf Rename klicken. Alternativ kannst du auch den Namen anklicken und F2 dr\u00fccken.</p> <p></p> <p>Zuerst k\u00fcmmern wir uns um die Tasten-Eingabe f\u00fcr die Bewegung. Unter Edit -&gt; Project Settings -&gt; Input kann man den Input Manager aufrufen.</p> <p></p> <p>Im Input Manager siehst du eine Horizontal Achse und eine Vertikal Achse. Diese benennen wir im ersten Schritt mal um. Ich habe sie hier mit \u201cH-AchseElli\u201d  bzw. \u201cV-AchseElli\u201d benannt. Diesen Namen brauchen wir sp\u00e4ter noch beim Programmieren. Bei den Achsen steht jeweils Positive Button und Negative Button mit je einem Feld wo man eine Taste eintragen kann.</p> <p>Dieser Positive/Negative Button macht Sinn wenn du dir ein Koordinatensystem vorstellst. In so einem System ist auf der Horizontal Achse, Positiv nach Rechts, und Negativ nach Links bzw. auf der Vertikalachse, Positiv nach Oben und Negativ nach Unten. Wenn jemand die Taste dr\u00fcckt die bei der HorizontalAchse Positiv Button ist, bewegt sich die Figur nach Rechts.</p> <p>Du kannst also jetzt die Tasten f\u00fcr die jeweiligen Bewegungsrichtungen eintragen, so wie du denkst die Steuerung ist am Besten. Ein Beispiel hierf\u00fcr w\u00e4re:</p> <ul> <li>H-AchseElli<ul> <li>Negative Button: a</li> <li>Positiv Button: d</li> <li>Type: Key or Mouse Button</li> </ul> </li> <li>V-AchseElli<ul> <li>Negative Button: s</li> <li>Positiv Button: w</li> <li>Type: Key or Mouse Button</li> </ul> </li> </ul> <p>WICHTIG</p> <p>Stelle sicher, dass unter Type \u201cKey or Mouse Button\u201d ausgew\u00e4hlt ist, ansonsten funktionieren unsere Einstellungen nicht richtig.</p> <p></p> <p>Da wir gerade die Projekteinstellungen ge\u00e4ndert haben, ist es wichtig nun auch das Projekt zu speichern. Das geschieht durch das Anklicken von File und Save Project.</p> <p></p>"},{"location":"bouncyfant/T03-movement/#rigidbody2d","title":"Rigidbody2D","text":"<p>Da Elli kein unbewegliches Objekt in unserem Spiel sein wird, brauchen wir eine Komponente, die uns hilft Elli zu bewegen, die Bewegungen zu berechnen und sogar die Physik auf sie wirken zu lassen. Gl\u00fccklicherweise bietet Unity genau so eine Komponente an, die sich um all die Dinge, wie Bewegung, Berechnung physikalischer Vorg\u00e4nge und Eigenschaften, Kollisionen, elastische St\u00f6\u00dfe und dergleichen k\u00fcmmert. Diese Komponente nennt sich Rigidbody2D. Rigid bedeutet so viel wie \u201cstarr\u201d, und dass der K\u00f6rper starr ist, kommt uns sehr gelegen, denn wir brauchen uns nicht darum k\u00fcmmern, eine ganze Skellettstruktur f\u00fcr Elli zu modellieren.  Einen Rigidbody2D erstellen wir, indem wir im Hierarchy Panel auf Elli draufklicken und dann im Inspector Panel auf der rechten Seite auf Add Component -&gt; Physics2D -&gt; Rigidbody 2D klicken.</p> <p></p> <p></p>"},{"location":"bouncyfant/T03-movement/#die-programmierung-des-elefanten","title":"Die Programmierung des Elefanten","text":"<p>Um die Bewegung zu programmieren, ben\u00f6tigen wir ein Script, das der Spielfigur Elli hinzugef\u00fcgt wird. Dieses Script erstellen wir, indem wir im Hierarchy Panel auf Elli klicken und dann im Inspector Panel auf der rechten Seite auf Add Component -&gt; NewScript -&gt; Create and Add (siehe Screenshot) klicken.</p> <p></p> <p></p> <p>Das eben erstellte Script befindet sich nun im Projekt im Asset Panel. Wir verschieben es jedoch in das Unterverzeichnis Scripts.</p> <p>Durch einen Doppelklick auf das Script \u00f6ffnet sich Visual Studio und wir k\u00f6nnen nun mit dem Programmieren beginnen.</p> <p>Achtung</p> <p>Beachte bitte, dass der Name der Klasse (Elli) jedenfalls mit dem Namen der Code-Datei (Script) \u00fcbereinstimmen muss. Du hast die Code-Datei wahrscheinlich nicht Elli genannt und musst in folgender Zeile Elli mit diesem Dateinamen ersetzen:</p> <pre><code>public class Elli : MonoBehaviour {\n</code></pre> <p>Das Ergebnis ist dann: <pre><code>public class [MeinScriptName]: MonoBehaviour {\n</code></pre></p> <p></p> <p>Am Anfang nehmen wir in unserem Script ein paar kleine \u00c4nderungen vor. In der Kommentarzeile ersetzen wir die englische Anmerkung durch die Zeile <code>// Anfangseinstellungen setzen</code>  und die Prozedur <code>Update</code> benennen wir in <code>FixedUpdate</code> um. <code>FixedUpdate</code> sorgt n\u00e4mlich daf\u00fcr, dass das Spiel auf unterschiedlich schnellen Ger\u00e4ten (egal ob auf einem \u00e4lteren Notebook, einem Smartphone, oder einem brandneuen Gaming PC) immer gleich schnell l\u00e4uft. Schnell meint in diesem Fall nicht die Framerate (FPS), sondern wie schnell sich die Spielfigur und die Objekte im Spiel bewegen. Obwohl sich nun die Spielfigur auf allen Plattformen gleich schnell am Bildschirm herum bewegt, hat man auf dem neuen Gaming-Monster-PC eine h\u00f6here Framerate als auf einem uralten Notebook.</p> <pre><code>// Anfangseinstellungen setzen\nvoid Start ()\n{\n\n}\n\n// Fixed Update wird immer in einem fixen Intervall aufgerufen.\nvoid FixedUpdate()\n{\n\n}\n</code></pre> <p>Der nachfolgende Quellcode, um die Bewegung von Elli zu realisieren, ist ein wenig komplizierter. Deshalb betrachten wir das Einbauen der Prozedur Gehen nun als \u00dcbung im Umgang mit dem Quellcode. Im Prinzip machen wir in der Prozedur <code>Gehen</code> folgendes: Wir berechnen aus dem Wert, den wir aus der horizontalen Eingabe-Achse abfragen, die horizontale (seitliche) Bewegung des Elefantenk\u00f6rpers. Wir bestimmen anhand der Bewegung des Elefantenk\u00f6rpers die Blickrichtung. Wir \u00fcbermitteln die Bewegungsgeschwindigkeit an die Animation in Unity. Dabei k\u00fcmmert sich Unity um einige Dinge, um die wir uns nun nicht mehr k\u00fcmmern brauchen: Unity \u00fcbernimmt die Abfrage der Tasten-Eingabe des Spielers f\u00fcr uns. Unity k\u00fcmmert sich ebenso um die Bewegung des Elefantenk\u00f6rpers. Wir m\u00fcssen lediglich die aktuelle Geschwindigkeit von Elli unserer Animation \u00fcbermitteln.</p> <p>Den nachfolgenden Quellcode f\u00fcgen wir zwischen der geschwungenen Klammer { am Ende der Prozedur Start und den Kommentar vor FixedUpdate hinein.</p> <p>Tipp</p> <p>Bei Interesse wird der Code in den Kommentaren genauer erkl\u00e4rt.</p> <pre><code>// Prozedur zum Bewegen des Elefanten\n// Der Parameter h ist 1 oder -1, wenn der Spieler die Taste f\u00fcr nach links oder rechts dr\u00fcckt. Sonst 0.\n//Bei Steuerung des Elefanten mit Maus m\u00fcsste man von h den Absolutbetrag\n//nehmen mit Mathf.Sign(h)\nprotected void Gehen(float h)\n{\n    /* Geschwindigkeit setzen\n        * Die aktuelle Bewegungsgeschwindigkeit des Elefanten wird als Vektor\n        *  an Unity weitergeleitet. Die horizontale Geschwindigkeit (seitw\u00e4rts)\n        *  wird hier auf die vorher festgelegte maximale Geschwindigkeit gesetzt.\n        * Der Vektor speichert horizontale\n        * und vertikale Geschwindigkeit Vector2(x, y).\n        */\n    Elefantenkoerper.velocity = new Vector2(h * MaxGeschwindigkeit,   Elefantenkoerper.velocity.y);\n\n    /* Blickrichtung des Elefanten bestimmen.\n        * Der Vektor f\u00fcr die Blickrichtung soll ein Vektor sein,\n        * der sich aus dem Vorzeichenr\u00fcckgabewert (-1 oder +1)\n        * der horizontalen Bewegungsrichtung (Mathf.Sign(h)) ergibt.\n        * Der y-Wert des Elefanten bleibt gleich, daher transform.localScale.y.       \n        */\n    if (h != 0) transform.localScale = new Vector2(Mathf.Sign(h), transform.localScale.y);\n\n    /* Die Geschwindigkeit wird auf den Absolutbetrag der horizontalen\n        * Bewegung gesetzt. Negative Geschwindigkeit gibt es nicht.\n        * z.B. wenn ich mit dem Auto im R\u00fcckw\u00e4rtsgang 10km/h fahre, fahre ich\n        * 10km/h in einer R\u00fcckw\u00e4rtsbewegung und nicht \"-10km/h\" ;)\n        */\n    Animation.SetFloat(\"Geschwindigkeit\", Mathf.Abs(h));\n}\n</code></pre> <p>Nachdem wir dies gemacht haben, erhalten wir vorerst jede Menge Fehler da ja etwa Variablen wie Max Geschwindigkeit oder Objekte wie Elefanten K\u00f6rper noch gar nicht existieren.</p> <p></p> <p>Diese Variablen wollen wir im n\u00e4chsten Schritt definieren und gleich in der Prozedur Start mit den entsprechenden Komponenten verlinken:</p> <p><pre><code>public class Elli : MonoBehaviour {\n    protected Rigidbody2D Elefantenkoerper;\n    protected Animator Animation;\n    public float MaxGeschwindigkeit = 10;\n\n    // Anfangseinstellungen setzen\n    void Start ()\n    {\n        // Elefant mit RigidBody verlinken\n        Elefantenkoerper = GetComponent&lt;Rigidbody2D&gt;();\n\n        // Eine Referenz auf den Animator hinzuf\u00fcgen\n        Animation = GetComponent&lt;Animator&gt;();\n    }\n</code></pre> Nun m\u00fcssen wir noch in der Prozedur FixedUpdate die vorhin erstellte Prozedur Gehen aufrufen.</p> <pre><code>// Fixed Update wird immer in einem fixen Intervall aufgerufen.\n    void FixedUpdate()\n    {\n        Gehen(Input.GetAxis(\"H-AchseElli\"));\n    }\n</code></pre> <p>Der gesamte Quellcode sieht nun wie folgt aus:</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Elli : MonoBehaviour {\n    protected Rigidbody2D Elefantenkoerper;\n    protected Animator Animation;\n    public float MaxGeschwindigkeit = 10;\n\n    // Anfangseinstellungen setzen\n    void Start ()\n    {\n        // Elefant mit RigidBody verlinken\n        Elefantenkoerper = GetComponent&lt;Rigidbody2D&gt;();\n\n        // Eine Referenz auf den Animator hinzuf\u00fcgen\n        Animation = GetComponent&lt;Animator&gt;();\n    }\n\n    // Prozedur zum Bewegen des Elefanten\n    protected void Gehen(float h)\n    {\n        /* Geschwindigkeit setzen\n            * Die Geschwindigkeit ergibt sich aus aus der Eingabe f\u00fcr die horizontale\n            * Geschwindigkeit und der maximalen H\u00f6chstgeschwindigkeit des Elefanten\n            */\n        Elefantenkoerper.velocity = new Vector2(h * MaxGeschwindigkeit, Elefantenkoerper.velocity.y);\n\n        /* Blickrichtung des Elefanten bestimmen.\n            * Der Vektor f\u00fcr die Blickrichtung soll ein Vektor sein,\n            * der sich aus dem Vorzeichenr\u00fcckgabewert (-1 oder +1)\n            * der horizontalen Bewegungsrichtung (Mathf.Sign(h)) und\n            * dem Skalierungsfaktor auf der x-Achse ergibt.\n            * Der y-Wert des Elefanten bleibt gleich, daher nehmen wir nur den\n            * Skalierungsfaktor \"transform.localScale.y\".       \n            */\n        if (h != 0) transform.localScale = new Vector2(Mathf.Sign(h)*Mathf.Abs(transform.localScale.x), transform.localScale.y);\n\n        /* Die Geschwindigkeit wird auf den Absolutbetrag der horizontalen\n            * Bewegung gesetzt. Negative Geschwindigkeit gibt es nicht.\n            * z.B. wenn ich mit dem Auto im R\u00fcckw\u00e4rtsgang 10km/h fahre, fahre ich\n            * 10km/h in einer R\u00fcckw\u00e4rtsbewegung und nicht \"-10km/h\"\n            */\n        Animation.SetFloat(\"Geschwindigkeit\", Mathf.Abs(h));\n    }\n\n    // Fixed Update wird immer in einem fixen Intervall aufgerufen.\n    void FixedUpdate()\n    {\n        Gehen(Input.GetAxis(\"H-AchseElli\"));\n    }\n}\n</code></pre> Wenn wir nun auf Play dr\u00fccken und das Spiel starten, dann f\u00e4llt Elli ins bodenlose Leere. Deshalb setzen wir im Inspector Panel bei Rigidbody2D von Elli Gravity Scale kurzfristig auf Null. So k\u00f6nnen wir auch testen, ob wir die Bewegung erfolgreich implementiert haben.</p> <p></p>"},{"location":"bouncyfant/T04-levels/","title":"Teil 4 - Levels und Collider","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, wie man mehrere Assets importiert und sie als Plattform in einem Spiel verwendet. Au\u00dferdem lernst du wie man \"Collider\" zu Objekten hinzuf\u00fcgt. Das Endziel ist es, ein Level mit verschiedenen PLattformen zu bauen, auf denen deine Figur stehen kann.</p> In diesem Kapitel wirst du... Assets f\u00fcr Plattformen importieren Eine Plattform zu deiner Spielwelt hinzuf\u00fcgen Der Plattform Collider zuweisen und diese anpassen Deine erste Plattform in ein GameObject packen, dass du kopieren kannst. Mehrere Plattformen in den Spiel kopieren und dein erstes Level designen. Deiner Spielfigur einen Polygon Collider zuweisen. Spielfeldgrenzen mithilfe von Box Collidern erstellen. Eine Vorlage erstellen. Einen Boden mit Hilfe eines Scripts und einer Vorlage in deinem Spiel generieren lassen."},{"location":"bouncyfant/T04-levels/#unsere-neuen-assets-importieren-und-benennen","title":"Unsere neuen Assets importieren und benennen","text":"<p>In diesem Teil wollen wir das Spielfeld, in dem sich die Elefanten bewegen, erstellen. Dazu geh\u00f6ren vorerst die unbeweglichen Spielobjekte und der Hintergrund. Der gr\u00f6\u00dfte Unterschied zwischen den Spielobjekten und dem Hintergrund ist der, dass die Elefanten mit dem Spielobjekten interagieren k\u00f6nnen: Spielobjekte k\u00f6nnen den Elefanten den Weg versperren, einfach als Boden zum drauf stehen dienen oder auch von den Elefanten bewegt werden. Als erstes importieren wir die Landschafts-Assets. In unserem Moodle-Kurs findet ihr Assets zum Download, die f\u00fcr die freie Verwendung zur Verf\u00fcgung stehen. Gerne k\u00f6nnt ihr euch auch eure eigenen Assets erstellen.</p> <p></p> <p>In unserem Beispiel nutzen wir die kostenlosen Tilesets von Game Art 2D. Zu finden unter https://www.gameart2d.com/free-platformer-game-tileset.html</p> <p>Kostenlose freie Sprites,  Tilesets und mehr findet man z.B. auf https://www.gameart2d.com/freebies.html.</p> <p>Die Lizenz f\u00fcr die kostenlosen freien Sprites und Tilesets findet ihr unter https://www.gameart2d.com/license.html.    </p> <p></p> <p>Im Heruntergeladenen Ordner navigieren gehen wir zu freetileset/png/Tiles, importieren die Dateien mit den Nummern 2, 13, 14 und 15 und benennen Sie folgenderma\u00dfen um:</p> <ul> <li>2 -&gt; Boden</li> <li>13 -&gt; Plattform_Links</li> <li>14 -&gt; Plattform_Mitte</li> <li>15 -&gt; Plattform_Rechts</li> </ul> <p>Das Ergebnis sollte in etwa so aussehen:</p> <p></p> <p>Die Plattformen ziehen wir einfach via Drag-and-Drop in die Spiel-Szene hinein. Die Plattformen sind wahrscheinlich zu gro\u00df, aber das k\u00f6nnen wir wieder mit dem Feld Pixels Per Unit anpassen. 170 Pixels per Unit ist ein guter Wert f\u00fcr unsere Plattformen.</p> <p></p> <p>In der Spielszene kannst du die Plattformen auf zwei Arten verschieben: Entweder du verschiebst die Plattformen mit dem Verschiebepfeil   oder indem du Werte f\u00fcr X und Y im Inspector Panel unter Transform bei der Position eingibst. Diese Werte entsprechen der Position in einem Koordinatensystem.</p> <p></p>"},{"location":"bouncyfant/T04-levels/#physik-und-collider","title":"Physik und Collider","text":"<p>\u00c4ndern wir nun wieder bei Elli im Inspector Panel die Gravity Scale auf 1 und dr\u00fccken auf Play, dann f\u00e4llt die Elefantin wieder ins Bodenlose durch die Plattform. Der Grund daf\u00fcr liegt darin, dass die Plattform noch kein Teil der physikalischen Welt ist. Genau genommen liegt die Ursache darin begr\u00fcndet, dass wir noch keine Collider f\u00fcr die Plattformteile angelegt haben. Ohne Collider ist unsere Plattform n\u00e4mlich einfach ein Hintergrundobjekt, an dem andere Objekte einfach vorbeiziehen.</p>"},{"location":"bouncyfant/T04-levels/#collider","title":"Collider","text":"<p>Collider stellen in Unity Grenzen f\u00fcr die Kollisionserkennung zur Verf\u00fcgung. \u00dcberschneiden sich die Grenzen von zwei Objekten die Teil der Physik Welt sind, dann wird eine Kollision ausgel\u00f6st, dass wird beispielsweise dazu eingesetzt, dass ein Objekt von einem anderen Objekt abprallt oder nicht hindurch kann.</p> <p>Es gibt in Unity unterschiedliche Arten von Collidern:</p> <ul> <li>Box Collider</li> <li>Circle Collider</li> <li>Edge Collider (f\u00fcr R\u00e4nder)</li> <li>Composite Collider</li> <li>Capsule Collider</li> <li>Polygon Collider</li> </ul> <p>Die einfachsten Collider sind Box Collider und Circle Collider. Mit Einfachheit ist nicht nur die Einfachheit der Form gemeint, sondern auch, wie einfach Kollisionsereignisse zu berechnen sind. Bei Box und Circle sind Kollisionsereignisse mit weniger Aufwand zu berechnen, als bei komplizierten Formen, die etwa Polygon-Collider verwenden. Deshalb sollte man nach M\u00f6glichkeit eher einfache Collider verwenden. Verwendet man zu viele komplizierte Collider kann dies die Framerate verringern, bzw. zu Ruckeln f\u00fchren.</p> <p>Um das Konzept des Geschwindigkeitsvorteils von einfachen Collidern anzuwenden, f\u00fcgen wir der Plattform_Links nun statt einem Polygon Collider, zwei Box Collider hinzu. Daf\u00fcr klicken wir im Inspector Panel auf AddComponent -&gt;Physics2D-&gt;Box Collider 2D. Wir optimieren noch das Offset (Position) und die Werte bei Size (Gr\u00f6\u00dfe). Bei mir haben diese Werte gut ausgesehen, aber es kann gut sein, dass in deinem Spiel ein paar Dinge anders sind.  </p> <p> </p> <p>Alternativ kann man auch auf den Button neben Edit Collider klicken und den Collider durch Ziehen mit der Maus anpassen.</p> <p></p> <p>Nachfolgend unser Plattformteil mit den Collider-Grenzen der zwei Box-Collider in gr\u00fcn.</p> <p></p> <p>Anmerkung: Zuvor habe ich \u00fcber das Konzept des Geschwindigkeitsvorteils bei Collider geschrieben. Ich habe deswegen zuvor in der Formulierung das Konzept verwendet, weil in der Praxis so einfache Objekte wie unsere Plattformen, noch dazu, wenn sie in so geringer Zahl sind und sich dar\u00fcber hinaus statisch, also fix in der Landschaft sind, locker mit der Rechenleistung von \u00e4lteren Computern, Konsolen oder Smartphones auskommen. Dennoch halte ich es f\u00fcr wichtig, dass man gerade im Simulationsbereich oder im Bereich der Computergrafik \u00fcber Effizienz von Berechnungen oder Algorithmen ein wenig nachdenkt.</p> <p>F\u00fcr das mittlere Plattformst\u00fcck reicht ein einzelner Box Collider. F\u00fcr das rechte Plattformobjekt habe ich diesmal die Box Collider nicht \u00fcberschneidend sondern einfach \u00fcbereinandergelegt gestaltet.</p> <p> </p> <p>Abschlie\u00dfend machen wir uns noch das weitere Gestalten des Levels leichter, indem wir ein neues Game Objekt erstellen in das wir alle drei Teile der Plattform hinein verschieben, so dass sie gruppiert sind. Dazu klicke ich mit der rechten Maustaste in das Hierarchy Panel und w\u00e4hle aus dem Kontextmen\u00fc Create Empty. Das neue GameObject benennen wir dann gleich in \"Plattform\" um und schieben die einzelnen Plattformteile in das GameObject Plattform. Das geht am besten indem man alle 3 Plattformteile markiert indem man STRG h\u00e4lt und sie anklickt und anschlie\u00dfend auf das Gameobject Platform zieht. Am Screenshot unten, sieht man wie das Endergebnis aussehen soll. Die so gruppierten Plattformen kann man nun einfach mit der rechten Maustaste duplizieren und beliebig am Spielfeld verteilen.</p> <p> </p> <p>Am Ende sollte das Spielfeld in etwa so aussehen:</p> <p></p> <p>Das graue Rechteck stellt den momentanen Kameraausschnitt dar. Dieser Ausschnitt bestimmt wie viel Platz wir am Spielfeld haben. Ist uns der Platz am Spielfeld zu gering, so k\u00f6nnen wir einfach durch einen Klick auf Main Camera (zu finden in der Hierarchy) die Eigenschaften der Kamera im Inspector anzeigen. In den Eigenschaften \u00e4ndern wir einfach die Gr\u00f6\u00dfe (Size) auf einen h\u00f6heren Wert, z.b. 7.</p> <p>Der Elefantendame Elli g\u00f6nnen wir am Ende noch einen Polygon Collider.</p> <p></p> <p>Beim Hauptcharakter unseres Spiels kann man schlie\u00dflich ein wenig mehr Rechenaufwand in Kauf nehmen und die genauen Grenzen, wie etwa beim R\u00fcssel, machen dann die ganze Physik-Simulation viel spa\u00dfiger beim Spielen.</p> <p></p>"},{"location":"bouncyfant/T04-levels/#spielfeldgrenzen","title":"Spielfeldgrenzen","text":"<p>Um das Spielfeld zu begrenzen gibt es mehrere M\u00f6glichkeiten:</p> <ol> <li>Wir f\u00fcgen einen Collider zur Kamera hinzu.</li> <li>Wir erstellen f\u00fcr jede Spielfeldgrenze ein eigenes Game Object und f\u00fcgen dem Objekt den jeweiligen Collider hinzu.</li> <li>Wir erstellen ein einziges Game Object und f\u00fcgen diesem Objekt alle vier Spielfeldbegrenzungen zu. In diesem Beispiel w\u00e4hlen wir Variante 3, erstellen einen neues Game Object, benennen es in Spielfeldgrenzen um und f\u00fcgen dem soeben erstellten Objekt vier Box Collider 2D hinzu.</li> </ol> <p></p> <p>Wie man sehen kann, gehen die Spielfeldgrenzen oben ein wenig \u00fcber den Bildauschnitt, den die Kamera darstellt, hinaus. Dadurch k\u00f6nnen die Elefanten nach oben ein wenig \u00fcber den Rand hinaus springen was vom Spiel-Feeling her ganz angenehm ist.</p> <p></p> Position des Colliders Offset X Offset Y Size X Size Y Oben 0 8.5 20 1 Unten 0 -6.8 20 1 Links -9.6 1 1 16 Rechts 9.6 1 1 16"},{"location":"bouncyfant/T04-levels/#bodenlegen","title":"Bodenlegen","text":"<p>Jetzt f\u00e4llt Elli zumindest nicht mehr aus dem Spielfeld heraus. Doch auf einem unsichtbaren Bodens gehen hat nur halb so viel Stil. Deshalb werden wir uns jetzt einen sch\u00f6nen Boden legen, der sich genau mit der Grenze des unteren Spielfeldcolliders deckt. Zuerst \u00e4nderen wir die Gr\u00f6\u00dfe des Sprites f\u00fcr den Boden auf 170 pixels per unit  und ziehen dann das Boden-Sprite in die Szene hinein. Das Ganze machen wir nun in etwa 30 Mal. Dabei bekommt man richtig viel \u00dcbung ;-)  Halt, Nein, Scherz! Als InformatikerInnen lieben wir Effizienz und elegante Konstrukte und deshalb verwenden wir f\u00fcr das Erstellen der weiteren Bodenteile eine Schleife.</p> <p></p>"},{"location":"bouncyfant/T04-levels/#vorlagen","title":"Vorlagen","text":"<p>Wollen wir mittels Script neue Objekte erstellen, dann k\u00f6nnen wir uns Arbeit ersparen, indem wir Vorlagen verwenden. In Unity werden Vorlagen auch Prefabs genannt. Eine Vorlage erstellt man einfach dadurch, dass man aus dem Hierarchy Panel ein vorhandenes Game Object in das Asset Panel zieht. Wir ziehen also das Game Object  Boden in das Verzeichnis Vorlage (das wir hoffentlich bereits erstellt haben) und schon haben wir eine Vorlage.</p> <p></p> <p>Dem Objekt Spielfeldgrenzen f\u00fcgen wir nun mittels Add Component ein neues Script hinzu, das wir Spielfeld nennen. Dieses Script verschieben wir auch gleich wieder in den Ordner Scripts.</p> <p></p> <p>Das Script klicken wir doppelt an und nun sollte sich Microsoft Visual Studio \u00f6ffnen. In Visual Studio l\u00f6schen wir im Script Spielfeld zuerst die Prozedur Update. Dann f\u00fcgen wir gleich unter der Klassendefinition unser Spielobjekt namens Boden hinzu und speichern das Script mit Strg+s. Das GameObject Boden entspricht dann beim Programmieren unserer Vorlage Boden die wir vorhin erstellt haben.</p> <p><pre><code>public class Spielfeld : MonoBehaviour {\n    public GameObject Boden;\n</code></pre> Ganz wichtig ist es dem Feld Boden das bei uns in Unity Inspector auftaucht, nun auch die Vorlage zuzuweisen. Dies bewerkstelligen wir, indem wir die zuvor angelegte Vorlage in das entsprechende Feld im Script ziehen.  </p> <p></p> <p>Achtung</p> <p>Scheint das Feld Boden beim Script nicht auf, liegt das evtl. daran, dass das Script noch nicht gespeichert wurde.</p> <p>Schlie\u00dflich erstellen wir die Prozedur f\u00fcr das Zeichnen des Bodens. Dabei wird neuer Boden von unserer Vorlage Boden instanziiert und eine bestimmte Position gesetzt. Diese Position kommt auf die Werte innerhalb von <code>new Vector3(x * 0.75f, -6.81f, -4)</code> an. Die Werte entsprechen den Koordinaten (x,y,z) in einem Koordinatensystem . Beim Aufrufen unserer Funktion <code>ZeichnenBoden(int x)</code> wird eine Zahl x \u00fcbergeben und je nachdem welche Zahl x ist, wird unser Boden an einer andere Stelle erschaffen. Wenn wir die Zahl 1 \u00fcbergeben, ist die Position (0.75, 6.81, -4) und wenn wir 2 \u00fcbergeben ist die Position (1.5, -6,81, -4).</p> <pre><code>// In dieser Prozedur wird der Boden gezeichnet\npublic void ZeichnenBoden(int x)\n{\n   Instantiate(Boden, new Vector3(x * 0.75f, -6.81f, -4), Quaternion.identity);\n}\n</code></pre> <p>Tipp</p> <p>Wir befinden uns im 2D Modus, also gibt es keine Z Koordinate. Wir k\u00f6nnten also statt -4 irgendwas schreiben, das macht keinen Unterschied. Solltest du aber irgendwann mal ein 3D Spiel machen wollen, musst du auch bei der Z Koordinate etwas berechnen.</p>"},{"location":"bouncyfant/T04-levels/#aufgabe","title":"Aufgabe","text":"<p>F\u00fcge in die vorhandenen Prozedur Start eine Schleife ein, die die Bodenst\u00fccke am am unteren Rand des Spielfelds automatisch zeichnet.</p> <p><pre><code>// Initialisierungen\nvoid Start ()\n{\n    // In dieser Schleife wird der Boden gezeichnet\n    /*** Hier den Code f\u00fcr die Schleife einf\u00fcgen ***/\n}\n</code></pre> Eine m\u00f6gliche L\u00f6sung sieht so aus: <pre><code>for (int i = -20; i &lt;= 20; i++) ZeichnenBoden(i);\n</code></pre> Obige Version ist die Kurzform und gleichwertig mit der Langform mit den geschwungenen Klammern: <pre><code>for (int i = -20; i &lt;= 20; i++)\n{\n    ZeichnenBoden(i);\n}     \n</code></pre> Zum Abschluss noch einmal der ganze Quellcode des Scripts Spielfeld.cs:</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Spielfeld : MonoBehaviour {\n    public GameObject Boden;\n\n    // Initialisierungen\n    void Start ()\n    {\n        // In dieser Schleife wird der Boden gezeichnet\n        for (int i = -20; i &lt;= 20; i++) ZeichnenBoden(i);\n    }\n\n    // In dieser Prozedur wird der Boden gezeichnet\n    public void ZeichnenBoden(int x)\n    {\n        Instantiate(Boden, new Vector3(x * 0.75f, -6.81f, -4), Quaternion.identity);\n    }\n}\n</code></pre> <p>Das Resultat sieht dann so aus:</p> <p></p>"},{"location":"bouncyfant/T04-levels/#hintergrund-und-abschlussaufgaben","title":"Hintergrund und Abschlussaufgaben","text":"<p>Zum Abschluss haben wir die letzten Schritte des Leveldesign als \u00dcbung f\u00fcr dich ausgedacht. Dabei geht es darum Dinge anzuwenden, die in diesem Kapitel besprochen wurden.</p>"},{"location":"bouncyfant/T04-levels/#aufgabe-1","title":"Aufgabe 1","text":"<p>F\u00fcge der Spieleszene den Hintergrund BG.png aus freetileset_jungle\\png\\BG (Download)  hinzu. In Moodle wird man dann die L\u00f6sung ein/ausblenden k\u00f6nnen.</p>"},{"location":"bouncyfant/T04-levels/#losung-aufgabe-1","title":"L\u00f6sung Aufgabe 1","text":"<p>Rechtsklick in den Asset Panel-&gt;Import New Asset. Ausw\u00e4hlen von freetileset_jungle\\png\\BG\\BG.png</p> <p>Die Grafik vom Projektbereich in das Hierarchy Panel ziehen und in \u201cHintergrund\u201d umbenennen. Die Grafik (Hintergrund) anklicken und anpassen. Dazu im Inspector folgende Werte setzen: Position: X=0, Y=0, Z=10 Gr\u00f6\u00dfe: Im Inspector Scale auf folgenden Werte setzen: X=2, Y=2, Z=1. Fertig! Eventuell, musst du im Inspector bei Sprite Renderer \u201cOrder in Layer\u201d auf -1 setzen. Dadurch ist dein Hintergrund auf einem eigenen Layer hinter den anderen Objekten.</p>"},{"location":"bouncyfant/T04-levels/#aufgabe-2","title":"Aufgabe 2","text":"<p>F\u00fcge die Grafik Tree3.png aus dem freetileset_jungle\\png\\Object zur Spielszene hinzu und Weise dem Baum einen Polygon Collider 2D zu.</p>"},{"location":"bouncyfant/T04-levels/#losung-aufgabe-2","title":"L\u00f6sung Aufgabe 2:","text":"<p>Rechtsklick in den Asset Panel-&gt;Import New Asset. Ausw\u00e4hlen von freetileset_jungle\\png\\Object\\Tree_3.png Die Grafik vom Projektbereich in die Hierarchy ziehen und in Baum umbenennen. Die Grafik (Hintergrund) anklicken und anpassen. Dazu im Inspector folgende Werte setzen: Position: X=0, Y=-3.8, Z=10 Gr\u00f6\u00dfe: Im Inspector Scale auf folgenden Werte setzen: X=2, Y=2, Z=1. Fertig! In der Hierarchy den Baum anklicken und im Inspector \u00fcber Add Component-&gt;Physics 2D-&gt;Polygon Collider 2D  den Collider hinzuf\u00fcgen! Fertig!</p> <p>Pro-Tipp</p> <p>Wenn man m\u00f6chte, dass die Objekte im Spielfeld ein wenig in der Baumkrone verschwinden, dann kann man die Gr\u00f6\u00dfe des Objekts z.B. Tree_3 zuerst auf einen h\u00f6heren Wert setzen (z.B. 110) und dann den Collider hinzuf\u00fcgen. Ein h\u00f6herer Wert bei Pixelgr\u00f6\u00dfe bedeutet ja, dass der Baum kleiner dargestellt wird. Dadurch haben wir einen etwas kleineren Baum mit einem kleineren Collider. Wenn wir jetzt die Pixelgr\u00f6\u00dfe wieder auf den urspr\u00fcnglichen Wert von 100 zur\u00fccksetzen, dann bleibt der Collider kleiner als die graphische Darstellung des Baums. Der Collider skaliert n\u00e4mlich nur dann mit, wenn ich die Gr\u00f6\u00dfe eines Spielobjekts via Transform/Scale \u00e4ndere. F\u00fcr das Finetuning k\u00f6nnte man noch das Offset des Polygon Colliders anpassen, z.B. indem wir Y=-0,1 setzen. Abschlie\u00dfend setzt man noch den Z-Wert des Baums auf einen niedrigeren Z-Wert, als den Wert der anderen Spielobjekte (z.B. -2).</p>"},{"location":"bouncyfant/T05-secondchar/","title":"Teil 5 - Zweite Spielfigur erstellen","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du wie man eine zweite Spielfigur erstellt. Du lernst \u00fcber das Konzept von Vererbung in der Programmierung und wie Mutter-und Kindklassen schreibst, um Zeit zu sparen.</p> In diesem Kapitel wirst du... Die Steuerung deiner Figur einstellen. \u00dcber Vererbung in der objektorientierten Programmierung lernen. Ein neues BouncyFant.cs Script erstellen. Die Codeteile die alle Spielfiguren gemeinsam haben zu BouncyFant.cs verschieben. Zwei neue Skripte f\u00fcr deine Spielfiguren Elli und Ossi erstellen, die von dem neuen BouncyFant.cs erben. Die Variablennamen in Elli.cs und Ossi.cs gegebenfalls anpassen. Die Input Manager Einstellungen f\u00fcr deine zweite Spielfigur t\u00e4tigen."},{"location":"bouncyfant/T05-secondchar/#objektorientierte-programmierung-vererbung","title":"Objektorientierte Programmierung, Vererbung","text":"<p>In diesem Kapitel erstellen wir eine zweite Spielfigur. Wir m\u00f6chten jedoch nicht einfach eine Kopie der vorhandenen Spielfigur erstellen, sondern wir m\u00f6chten eine Parent-Klasse erstellen von der wir dann die Child-Klassen ableiten.</p> <p></p> <p>Dazu ist es hilfreich \u00fcber die grundlegenden Prinzipien der objektorientierten Programmierung Bescheid zu wissen. Wer sich noch einmal die Grundlagen der objektorientierten Programmierung durchlesen m\u00f6chte, kann diese in unserem Moodle-Kurs unter diesem Link finden: Lernmaterialien \u00fcber objektorientierte Programmierung</p>"},{"location":"bouncyfant/T05-secondchar/#einfuhrende-ubung","title":"Einf\u00fchrende \u00dcbung","text":"<p>\u00dcberlegt in Gruppen zu je vier Personen, welche Vorteile eine Vorlage einer Spielfigur, von der dann die weiteren Spielfiguren abgeleitet sind, bringt. Notiert eure Ergebnisse auf einem Medium (Papier, PC, Smartphone) eurer Wahl.</p>"},{"location":"bouncyfant/T05-secondchar/#mogliche-vorteile-beispielantworten","title":"M\u00f6gliche Vorteile (Beispielantworten)","text":"<ul> <li>Der Quellcode wird strukturierter und \u00fcbersichtlicher.</li> <li>Man kann durch Vererbung gemeinsame Eigenschaften und gemeinsames Verhalten teilen Muss den Quellcode nicht doppelt implementieren/kopieren.</li> <li>\u00c4nderungen in der Vorlage wirken sich automatisch auf die abgeleiteten Objekte aus. Man muss nicht jede \u00c4nderung f\u00fcr jede Spielfigur durchf\u00fchren.</li> </ul>"},{"location":"bouncyfant/T05-secondchar/#ein-neues-objekt-bouncyfant-erstellen","title":"Ein neues Objekt \u201cBouncyFant\u201d erstellen","text":"<p>Das neue Objekt, dass wir ben\u00f6tigen, realisieren wir einfach in einem Script. Dazu erstellen wir in unserem Script-Verzeichnis das Script BouncyFant.cs.</p> <p></p> <p>Die Methoden Start und Update k\u00f6nnen wir l\u00f6schen, da wir sie in der \u00fcbergeordneten Klasse nicht ben\u00f6tigen. Nun verschieben (Ausschneiden - STRG + X ) wir von Elli alle Variablen und Methoden, die allen Elefanten gemeinsam sein sollen, in die Klasse BouncyFant. Am Ende soll unsere Klasse BouncyFant nun so aussehen:</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BouncyFant : MonoBehaviour {\n    protected Rigidbody2D Elefantenkoerper;\n    protected Animator Animation;\n    public float MaxGeschwindigkeit = 10;\n    public string Name;\n\n    // Prozedur zum Bewegen des Elefanten\n    protected void Gehen(float h)\n    {\n        /* Geschwindigkeit setzen\n            * Die Geschwindigkeit ergibt sich aus aus der Eingabe f\u00fcr die horizontale\n            * Geschwindigkeit und der maximalen H\u00f6chstgeschwindigkeit des Elefanten\n            */\n        Elefantenkoerper.velocity = new Vector2(h * MaxGeschwindigkeit, Elefantenkoerper.velocity.y);\n\n        /* Blickrichtung des Elefanten bestimmen.\n            * Der Vektor f\u00fcr die Blickrichtung soll ein Vektor sein,\n            * der sich aus dem Vorzeichenr\u00fcckgabewert (-1 oder +1)\n            * der horizontalen Bewegungsrichtung (Mathf.Sign(h)) ergibt.\n            * Der y-Wert des Elefanten bleibt gleich, daher transform.localScale.y.       \n            */\n        if (h != 0) transform.localScale = new Vector2(Mathf.Sign(h), transform.localScale.y);\n\n        /* Die Geschwindigkeit wird auf den Absolutbetrag der horizontalen\n            * Bewegung gesetzt. Negative Geschwindigkeit gibt es nicht.\n            * z.B. wenn ich mit dem Auto im R\u00fcckw\u00e4rtsgang 10km/h fahre, fahre ich\n            * 10km/h in einer R\u00fcckw\u00e4rtsbewegung und nicht \"-10km/h\" ;)\n            */\n        Animation.SetFloat(\"Geschwindigkeit\", Mathf.Abs(h));\n    }\n}\n</code></pre> <p>Damit Elli die Methoden und Variablen der Parent-Klasse BouncyFant  auch nutzen kann, teilen wir dem Compiler mit, dass Elli eine Child-Klasse von BouncyFant ist.Dies bewerkstelligen wir, indem wir die oberste Zeile der Klasse Elli \u00e4ndern. <code>public class Elli : BouncyFant {</code></p> <p>Die Klasse Elli sieht nun so aus:</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Elli : BouncyFant {\n    // Anfangseinstellungen setzen\n    void Start ()\n    {\n        // Den Namen setzen\n        Name = \"Elli\";\n\n        // Elefant mit RigidBody verlinken\n        Elefantenkoerper = GetComponent&lt;Rigidbody2D&gt;();\n\n        // Eine Referenz auf den Animator hinzuf\u00fcgen\n        Animation = GetComponent&lt;Animator&gt;();\n    }\n\n    // Fixed Update wird immer in einem fixen Intervall aufgerufen.\n    void FixedUpdate()\n    {\n        Gehen(Input.GetAxis(\"H-AchseElli\"));\n    }\n}\n</code></pre> In  der Prozedur Start, f\u00fcgen wir unter der Zeile <code>Animation = GetComponent&lt;Animator&gt;();</code> noch den Quellcode ein, um die Farbe von Elli auf einen leichten r\u00f6tlichen Ton zu \u00e4ndern. <pre><code>// Setzen von Ellis Farbe auf einen leichten Rotton - Color(Rot, Gr\u00fcn, Blau)\nGetComponent&lt;SpriteRenderer&gt;().color = new Color(0.96f, 0.85f, 0.8f);\n</code></pre> Jetzt k\u00f6nnen wir  uns bereits um Ellis Begleiter k\u00fcmmern. Zuallererst klicken wir in der Hierarchy mit der rechten Maustaste auf Elli und duplizieren das GameObject Elli.</p> <p></p> <p>Das neue GameObject benennen wir nun um, beispielsweise in \"Ossi\".</p> <p>Der Elefant Ossi ben\u00f6tigt ein eigenes Script. Durch das Duplizieren des Objekts Elli ist auch noch Elli Script in Ossi enthalten. Dieses Script l\u00f6schen wir im Inspector.</p> <p></p> <p>Ossis neues Script erstellen wir via Add Component-&gt;New Script ebenfalls im Inspector. Doch einen Doppelklick auf das Script \u00f6ffnet sich wieder Visual Studio.  Wann legen wir zuerst fest, dass Ossi  von der Klasse BouncyFant abgeleitet wird: <code>public class Ossi : BouncyFant {</code></p> <p>Wichtig</p> <p>Vergiss nicht, den Namen der Klasse auch auf Ossi umzu\u00e4ndern. Au\u00dferdem m\u00fcssen in C# der Dateiname und der Name der Klasse \u00fcbereinstimmen, sonst gibt es Fehlermeldungen. Die Datei der Klasse Ossi muss also Ossi.cs hei\u00dfen.</p> <p>Die anderen Quellcodeteile k\u00f6nnen wir aus Elli.cs kopieren. Dabei \u00e4ndern wir nur die Zeile mit der Farbe und die Zeile mit der Eingabeachse, sodass unser Quellcode schlie\u00dflich so aussieht. <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Ossi : BouncyFant {\n    // Anfangseinstellungen setzen\n    void Start()\n    {\n        // Den Namen setzen\n        Name = \"Ossi\";\n\n        // Elefant mit RigidBody verlinken\n        Elefantenkoerper = GetComponent&lt;Rigidbody2D&gt;();\n\n        // Eine Referenz auf den Animator hinzuf\u00fcgen\n        Animation = GetComponent&lt;Animator&gt;();\n\n        // Setzen von Ossis Farbe auf einen leichten Blauton - Color(Rot, Gr\u00fcn, Blau)\n        GetComponent&lt;SpriteRenderer&gt;().color = new Color(0.76f, 0.86f, 0.98f);\n    }\n\n    // Fixed Update wird immer in einem fixen Intervall aufgerufen.\n    void FixedUpdate()\n    {\n        Gehen(Input.GetAxis(\"H-AchseOssi\"));\n    }\n}\n</code></pre></p> <p>Gerne k\u00f6nnt ihr probieren, wie das Spiel l\u00e4uft, wenn ihr die Eingabe Achse nicht \u00e4ndert. Dann steuern sich die Elefanten wunderbar synchron - beide mit den Tasten A und D.</p> <p>Jetzt wo wir schon die Eingabe Achse ge\u00e4ndert haben sollten wir auch gleich in den Projekteigenschaften die ver\u00e4nderte Achse definieren. Das bewerkstelligen wir wieder in den Input Settings.</p> <p></p> <p>In den Input Settings (im Inspector) finden wir zwei weitere Achsen, die Horizontal und Vertical hei\u00dfen.</p> <p> </p> <p>Diese Achsen benennen wir in H-AchseOssi und V-AchseOssi um und \u00e4ndern folgende Einstellungen:</p> <ul> <li>H-AchseOssi<ul> <li>Negative Button: left</li> <li>Positiv Button: right</li> <li>Type: Key or Mouse Button</li> </ul> </li> <li>V-AchseOssi<ul> <li>Negative Button: down</li> <li>Positiv Button: up</li> <li>Type: Key or Mouse Button</li> </ul> </li> </ul> <p></p> <p>Das war's auch schon. Jetzt sind beide Elefanten unabh\u00e4ngig voneinander steuerbar, Elli mit den Tasten A und D und Ossi mit den Pfeiltasten.</p>"},{"location":"bouncyfant/T06-jump/","title":"Teil 6 - Jump around!","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, wie man eine Sprungmechanik implementieren kann. Au\u00dferdem lernst du, wie du Materialien in Unity verwenden kannst, um die Elefanten elastisch zu machen.</p> In diesem Kapitel wirst du... Eine Methode implementieren, die feststellt ob ein Elefant gerade am Boden steht oder in der Luft ist. Eine Methode implementieren, die die Elefanten springen l\u00e4sst. Ein Material erstellen, dass die Elefanten elastisch wie H\u00fcpfb\u00e4lle macht <p>Nun geht es darum, den Elefanten die F\u00e4higkeit zu verleihen, am Spielfeld wie Flummis herumzuspringen. Das Spiel hei\u00dft schlie\u00dflich ja Bouncy Fant.  </p>"},{"location":"bouncyfant/T06-jump/#springen","title":"Springen","text":""},{"location":"bouncyfant/T06-jump/#sprungkraft","title":"Sprungkraft","text":"<p>Erstelle zuallererst in BouncyFant.cs eine Variable f\u00fcr die Sprungkraft. Diese Variable soll festlegen wie hoch die Elefanten springen k\u00f6nnen. Setze diese Variable auf 300. (Du kannst auch gerne mit einer h\u00f6heren oder niedrigeren Sprungkraft experimentieren)</p> <pre><code>  public class BouncyFant : MonoBehaviour {\n    protected Rigidbody2D Elefantenkoerper;\n    protected Animator Animation;\n    public float MaxGeschwindigkeit = 10;\n    public float Sprungkraft = 300;\n</code></pre>"},{"location":"bouncyfant/T06-jump/#feststellen-ob-sich-der-elefant-am-boden-befindet","title":"Feststellen, ob sich der Elefant am Boden befindet","text":"<p>Die Elefanten sollen grunds\u00e4tzlich nur dann springen k\u00f6nnen, wenn sie auf einem Objekt stehen, von welchem sie abspringen k\u00f6nnen.  K\u00f6nnten Ossi und Elli n\u00e4mlich aus der Luft nochmal los springen, w\u00e4re das ziemlich gecheatet.  Es spricht aber nichts dagegen, dass man in einem anderen Spiel, einem anderen Level unseres Spiels oder bei Boostern, so ein Feature (z.B. Double Jump, oder ein Art Flappybird-Mechanik) einbaut. Die Methode AmBoden() stellt fest, ob sich direkt unter dem Elefanten ein Collider befindet. Baue diese Methode in das Script BouncyFant.cs ein, damit sie allen Elefanten zur Verf\u00fcgung steht.</p> <pre><code>// Feststellen, ob der Elefant am Boden ist.\nprotected bool AmBoden()\n{\n    // Abfragen der Grenzen der Kollisionsobjekte\n    Bounds Grenze = GetComponent&lt;Collider2D&gt;().bounds;\n    float Spielraum = Grenze.size.y * 0.1f;\n\n    // Berechnen einer Position die ein wenig unter der Kante des Kollisionsobjekts liegt\n    // sonst kann es vorkommen, dass der Elefant nicht springen kann, wenn er ganz still steht.\n    Vector2 v = new Vector2(Grenze.center.x, Grenze.min.y - Spielraum);\n\n    // Kollisionsabfrage:  mittels einer Linie  \n    RaycastHit2D Kollision = Physics2D.Linecast(v, Grenze.center);\n\n    // \"true\" zur\u00fcckgeben, wenn das Kollisionsobjekt nicht der Elefant selbst ist.\n    return (Kollision.collider.gameObject != gameObject);\n}\n</code></pre> <p>F\u00fcge darunter auch die Methode Springen() ein.</p> <pre><code>// Springen\nprotected void Springen(KeyCode Taste)\n{\n    // Herausfinden, ob der Elefant irgendwo steht, von wo er abspringen kann\n    bool springenmoeglich = AmBoden();\n\n    /* Wenn der Pfeil nach oben gedr\u00fcckt wird und Springen m\u00f6glich,\n     * d.h. der Elefant hat etwas, von wo er aus wegspringen kann,\n     * dann bekommt der Elefantenk\u00f6rper einen Impuls (Addforce),\n     * entsprechend der von uns gew\u00e4hlten Sprungkraft\n     */\n    if (Input.GetKey(Taste) &amp;&amp; springenmoeglich)\n        Elefantenkoerper.AddForce(Vector2.up * Sprungkraft);\n\n    /*\n     * Wenn der Elefant gerade springt, dann springen auf nicht m\u00f6glich setzen.\n     * Nicht = Rufzeichen(!).\n     */\n    Animation.SetBool(\"Springen\", !springenmoeglich);\n}\n</code></pre> <p>Unsere Elefanten rufen die Prozedur Springen mit der entsprechenden Taste in Klammer, mit der gesprungen werden soll, in FixedUpdate() auf.</p> <pre><code>Elli\nvoid FixedUpdate()\n{\n    Gehen(Input.GetAxis(\"H-AchseElli\"));\n    Springen(KeyCode.W);\n}\n\nOssi\nvoid FixedUpdate()\n{\n    Gehen(Input.GetAxis(\"H-AchseOssi\"));\n    Springen(KeyCode.UpArrow);\n}\n</code></pre>"},{"location":"bouncyfant/T06-jump/#elastisches-material","title":"Elastisches Material","text":"<p>Um Dinge wie Elastizit\u00e4t in Unity zu realisieren verwendet man ein Material, welches man den Collidern eines Objekts hinzuf\u00fcgt. Erstelle ein neues Material und gib ihm einen aussagekr\u00e4ftigen Namen (z.B. Elastisches Material)</p> <p></p> <p>Experimentiere mit verschiedenen Werten zwischen 0 und 1 bei der Bounciness (Elastizit\u00e4t), bis du einen Wert gefunden hast, mit dem du zufrieden bist.</p> <p></p> <p>Das Material kann man einem Objekt zuweisen, indem man es einfach auf das GameObject zieht.  Es erscheint dann auch automatisch beim Polygon Collider 2D als Material.</p> <p></p>"},{"location":"bouncyfant/T07-physics/","title":"Teil 7 - Es regne M\u00fcll!","text":"<p>Ziel</p> <p>In diesem Kapitel lernst du, wie du automatisch generierte Hindernisse f\u00fcr dein Spiel erstellst. Daf\u00fcr lernst du wie man ein Script schreibt, dass diese Objekte aus einer Vorlage erstellt und in deinem Spiel von der Decke fallen l\u00e4sst.</p> In diesem Kapitel wirst du... Kugeln und Kisten als Hindernisse f\u00fcr die Elefanten erstellen Den Unterschied zwischen Skalierung und \u00c4nderung der Pixel per Unit zur Ver\u00e4nderung der Gr\u00f6\u00dfe eines Objekts verstehen Ein Script schreiben, das Kugeln und Kisten vom Himmel herabregnen l\u00e4sst."},{"location":"bouncyfant/T07-physics/#hindernisse-hinzufugen","title":"Hindernisse hinzuf\u00fcgen","text":"<p>Wer die Background Story unseres Spiels gelesen hat, wei\u00df, dass der b\u00f6se Dr. Scramblewoods alles daran setzen wird, Elli und Ossi daran zu hindern, seine Maschinen zu deaktivieren und den Regenwald zu retten. Deshalb legt Dr. Scramblewoods den Bouncy Fants alle m\u00f6glichen Hindernisse in den Weg. Im ersten Level l\u00e4sst er sperrige Kisten und Kugeln auf sie herab regnen, damit sie den magischen Pilz nicht erreichen.</p> <p> </p> <p>Um den herabfallenden Sperrm\u00fcll zu erstellen, lege wieder f\u00fcr die Kugeln und Kisten jeweils ein neues Asset (Import New Asset) im Projektbereich an und  ziehe die Kisten und Kugeln in die Spieleszene. Die Assets die du daf\u00fcr verwenden kannst, findest du hier .</p>"},{"location":"bouncyfant/T07-physics/#rigidbody-und-collider","title":"Rigidbody und Collider","text":"<p>Sowohl Kugel als auch Kiste bekommen einen entsprechenden Collider (die Kugel einen Circle Collider und die Kiste einen Box Collider) zugewiesen. F\u00fcge den Kisten und Kugeln einen RigidBody2D hinzu, damit sich die Kisten und Kugeln auch bewegen k\u00f6nnen und nicht starr im Level verharren.</p>"},{"location":"bouncyfant/T07-physics/#skalieren","title":"Skalieren","text":"<p>Die Gr\u00f6\u00dfe von Kiste und Kugel haben wir in unserem Spiel noch um den Faktor 1,55 jeweils auf der X- und Y-Achse skaliert.</p> <p></p> <p>Pro-Tipp:</p> <p>Ganz allgemein ist es im Spiel sinnvoll, wenn man die Gr\u00f6\u00dfe der Objekte im Spiel durch die Skalierung \u00e4ndert. Diese Art der Gr\u00f6\u00dfen\u00e4nderung wirkt sich n\u00e4mlich auch auf die Gr\u00f6\u00dfe des Colliders aus.  W\u00fcrden wir die Gr\u00f6\u00dfe von Elli, jetzt wo wir bereits den Collider hinzugef\u00fcgt haben, mit Hilfe der Pixelgr\u00f6\u00dfe (Pixels per Unit im Sprite) verkleinern, dann w\u00fcrde der Collider gleich gro\u00df bleiben. Das h\u00e4tte zur Folge, dass Elli bereits an Objekten anst\u00f6\u00dft bevor sie diese ber\u00fchrt und nicht weiter kann, da der Collider bereits eine Kollision meldet.</p> <p>Nun ziehen wir das zuvor erstellte elastische Material aus dem Ordner Material auf die Kisten auf die Kugel, damit diese auch herumspringen. Um viele Kisten und Kugeln zu erstellen, kreieren wir uns wieder eine Vorlage. Zu diesem Zweck ziehen wir die Kugel und die Kiste in den Ordner Vorlagen.</p> <p></p> <p>Jetzt fehlt noch die Implementierung f\u00fcr die herabfallenden Gegenst\u00e4nde. Es soll in regelm\u00e4\u00dfigen Abst\u00e4nden M\u00fcll (Kisten oder B\u00e4lle) regnen. Um die Erzeugung dieser Objekte soll sich ein eigenes GameObject k\u00fcmmern. Erstelle ein neues GameObject und gib diesem den Namen MuellGenerator</p> <p></p> <p>Wir erstellen im GameObject MuellGenerator ein Script und nennen es Muell.cs. Dieses Script soll so aussehen (der Quellcode wird im Videotutorial genau erkl\u00e4rt).</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Muell : MonoBehaviour {\n\n    // Konstanten f\u00fcr die Maximalanzahl der Kisten definieren\n    const int MAXANZAHLKISTEN = 30;\n    const int MAXANZAHLKUGELN = 45;\n\n    // Z\u00e4hlvariablen Kisten\n    int Anzahlkisten = 0, Anzahlkugeln = 0;\n\n    // Erstellen der GameObjekte f\u00fcr Kisten und Kugeln\n    public GameObject Kiste;\n    public GameObject Kugel;\n\n\n    // Initialisierungen\n    void Start()\n    {\n        InvokeRepeating(\"ErzeugeKiste\", 1, 1);\n        InvokeRepeating(\"ErzeugeKugel\", 0.5f, 1);\n    }\n\n    // Erzeuge an einer Zufallsposition eine Kugel\n    void ErzeugeKugel()\n    {\n        if (Anzahlkugeln &lt; MAXANZAHLKUGELN)\n        {\n            // Zufallszahl zwischen dem linken und dem rechten Rand generieren\n            int x = (int)Random.Range(-13, 13);\n\n            // Instanzieren der Kugel an der Position x,y\n            Instantiate(Kugel, new Vector2(x, 8.0f), Quaternion.identity);\n\n            // Anzahl der Kugeln um 1 erh\u00f6hen\n            Anzahlkugeln++;\n        }\n    }\n    // Erzeuge an einer Zufallsposition eine Kiste\n    void ErzeugeKiste()\n    {\n        if (Anzahlkisten &lt; MAXANZAHLKISTEN)\n        {\n            // Zufallszahl zwischen dem linken und dem rechten Rand generieren\n            int x = (int)Random.Range(-13, 13);\n\n            // Instanzieren der Kiste an der Position x,y\n            Instantiate(Kiste, new Vector2(x, 8.0f), Quaternion.identity);\n\n            // Anzahl der Kugeln um 1 erh\u00f6hen\n            Anzahlkisten++;\n        }\n    }\n}\n</code></pre> <p>Wenn alles gespeichert ist, weisen wir im Inspector dem MuellGenerator die Vorlagen den Variablen Kiste und Kugel zu.</p> <p></p>"},{"location":"bouncyfant/T08-win/","title":"Teil 8 - Play to compete, cooperate to win!","text":"<p>Ziel</p> <p>In diesem Kapitel lernst du, wie du ein Zielobjekt und einen Punktez\u00e4hler inklusive der Skripte erstellst.</p> In diesem Kapitel wirst du... Ein Zielobjekt (den Zauberpilz) erstellen. Ein Punktez\u00e4hler als Text hinzuf\u00fcgen, der die Siege eines Spielers aufzeichnet. Eine Funktion schreiben die dein Level neu l\u00e4dt. Eine Funktion schreiben, die den Punktez\u00e4hler erh\u00f6ht wenn man den Pilz mit der Figur ber\u00fchrt."},{"location":"bouncyfant/T08-win/#kurzbeschreibung-des-spielziels","title":"Kurzbeschreibung des Spielziels","text":"<p>Im ersten Level ist es das Ziel, einen magischen Pilz zu erreichen. Diejenige, die zuerst den Pilz erreicht, bekommt einen Punkt. Das erste Level ist geschafft, wenn einer der Elefanten 10 Punkte erreicht hat. Die Zusammenarbeit kann aber \u00fcber das blo\u00dfe, gemeinsame Sammeln von Punkten auch hinausgehen. Beispielsweise k\u00f6nnt ihr euch helfen, den Pilz zu erreichen, etwa indem ihr euch gegenseitig in die Luft katapultiert und so h\u00f6here Spr\u00fcnge machen k\u00f6nnt.</p>"},{"location":"bouncyfant/T08-win/#der-zauberpilz-und-seine-eigenschaften","title":"Der Zauberpilz und seine Eigenschaften","text":"<p>Lassen wir einen magischen Pilz entstehen, der, wenn er ber\u00fchrt wird, einen Punkt f\u00fcr den jeweiligen Bouncy Fant bringt!</p> <p>Zum Einstieg beginnen wir gleich mit einer Aufgabe, deren L\u00f6sungsweg wir schon aus den vorigen Kapiteln kennen.</p>"},{"location":"bouncyfant/T08-win/#aufgabe-3","title":"Aufgabe 3","text":"<p>F\u00fcge dem Spiel auf der obersten Plattform die Grafik (freetileset_jungle\\png\\Object\\Mushroom_2.jpg) des magischen Pilzes hinzu.</p> <p>Tipp</p> <p>Das Tileset findest du in unserem Moodle Kurs oder bei Open Game Art. Wenn du die vorigen \u00dcbungen gemacht hast, dann hast du es bereits gespeichert.</p> <p> </p>"},{"location":"bouncyfant/T08-win/#losung","title":"L\u00f6sung","text":"<p>Mittels Rechtsklick in den Assets-Bereich und Import Assets wird der Pilz aus dem Pfad freetileset_jungle\\png\\Object\\Mushroom_2.jpg importiert.</p> <p></p> <p>Mittels Drag &amp; Drop ziehen wir dann den Pilz einfach an die gew\u00fcnschte Position im Szenenbereich.</p> <p></p> <p>Der Pilz bekommt nun einen 2D-Polygon-Collider: Dazu klickt man in der Spieleszene auf den Pilz und w\u00e4hlt im Inspector Add Component/Physics 2D/Polygon Collider 2D.</p>"},{"location":"bouncyfant/T08-win/#score","title":"Score","text":"<p>Nun wollen wir den Text einbauen, der anzeigt, wie oft Elli bzw. Ossi gepunktet, also den Pilz erreicht haben. Gl\u00fccklicherweise bietet Unity eine Funktion an, die es erlaubt Text auf einem sogenannten User Interface anzuzeigen.</p> <p>Mittels Rechtsklick im Hierachy Bereich UI&gt;Text  f\u00fcgen wir eine Textanzeige hinzu.</p> <p></p> <p>Hierbei wird ein Objekt Canvas erzeugt mit einem ChildObjekt Text. Wir ben\u00f6tigen insgesamt drei Texte, je einmal die Punkte f\u00fcr Elli und Ossi, sowie einen Text der bei Spielende erscheinen soll. Wir duplizieren also as Text-Objekt zweimal und benennen sieTextPunkteElli, TextPunkteOssi und TextGewinner.</p> <p></p> <p>Danach ver\u00e4ndern wir noch die Position der Texte f\u00fcr die Punktest\u00e4nde.</p> <p> </p> <p>Damit der Text bei verschiedenen Bildschirmgr\u00f6\u00dfen immer an der passenden Position ist, setze den Ursprung der Textkoordinaten f\u00fcr Ossi und Elli in die Ecken rechts und links oben und f\u00fcr den Gewinnertext in die Mitte. Beachtet auch, dass Horizontal- und Vertical Overflow tats\u00e4chlich auf Overflow gesetzt sind. Ist n\u00e4mlich Vertical Overflow  auf Truncate gesetzt, dann kann es passieren, dass euer Text ab einer gewissen Gr\u00f6\u00dfe nicht mehr angezeigt wird.</p> <p>Tipp</p> <p>Truncate bedeutet so viel wie Abschneiden oder Wegschneiden. Die Gr\u00f6\u00dfe des Textfeldes wird bei bei den Eigenschaften Rect Transform unter Width und Height angegeben. Ist der Text gr\u00f6\u00dfer als die angegebene H\u00f6he und Vertical Overflow auf Truncate gesetzt, dann wird der komplette Text weggeschnitten, da er \u00fcber den Rand hinaus steht.</p>"},{"location":"bouncyfant/T08-win/#der-code-fur-die-punkteanzeige-und-die-kollisionserkennung","title":"Der Code f\u00fcr die Punkteanzeige und die Kollisionserkennung","text":"<p>Die ben\u00f6tigten \u00c4nderungen f\u00fcgen wir im Script BouncyFant.cs hinzu. Bei den using Klauseln kommt die Zeile using UnityEngine.UI hinzu. Dies erm\u00f6glicht es uns, das User Interface zu verwenden. Das Elternobjekt BouncyFant erh\u00e4lt noch die Variablen: public int Punkte = 0;, public Text Infotext; und public Text Gewinnertext;.</p> <p>BouncyFant.cs <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\n\npublic class BouncyFant : MonoBehaviour\n{\n    protected Rigidbody2D Elefantenkoerper;\n    protected Animator Animation;\n    public string Name;\n    public float MaxGeschwindigkeit = 10;\n    public float Sprungkraft = 300;\n    protected int Punkte;\n    public Text PunkteText;\n    public Text GewinnerText;\n\n    // Prozedur zum Bewegen des Elefanten\n</code></pre></p> <p>Diese Prozedur startet das Level neu.</p> <p>BouncyFant.cs <pre><code>    // Neuladen der Szene nach einer Wartezeit\n    void NeuLaden()\n    {\n        SceneManager.LoadScene(\"sceneBouncyFant\");\n        Time.timeScale = 1.0f;\n    }\n</code></pre></p> <p>Die Methode void OnCollisionEnter2D(Collision2D col) wird aufgerufen, wenn eine Kollision vorliegt. In if (col.gameObject.name == \"Pilz\") wird gepr\u00fcft, ob der Elefant mit dem Pilz kollidiert und falls ja, dann werden die Punkte des Elefanten erh\u00f6ht und ein Gewinntext ausgegeben. In der zweiten If-Anweisung wird gepr\u00fcft, ob der Punktestand von 10 erreicht ist. Falls ja, werden die Punkte wieder zur\u00fcckgesetzt. Zum Schluss wird das Level mit einer Verz\u00f6gerung von drei Sekunden neu gestartet.</p> <p>BouncyFant.cs</p> <pre><code>    // Beim Ber\u00fchren des Pilzes die Punkte erh\u00f6hen und einen Gewinntext ausgeben.\n    void OnCollisionEnter2D(Collision2D col)\n    {\n        // Falls das Kollisionsobjekt der Pilz ist ...    \n        if (col.gameObject.name == \"Pilz\")\n        {\n            Punkte++; // Erh\u00f6hen des Punktestands um 1\n            // Punktestand dauerhaft speichern,\n            // damit beim Neuladen der Szene der Punktestand nicht verloren geht\n            PlayerPrefs.SetInt(\"Punkte\" + Name, Punkte);\n            // Name und Punkte anzeigen\n            PunkteText.text = Name + \" \" + Punkte.ToString();\n            GewinnerText.text = Name + \"  W I N S !\"; // Gewinnermeldung\n            if (Punkte &gt;= 10)\n            {\n                GewinnerText.text = \"L E V E L   C O M P L E T E D\"; // Geschafft\n                // R\u00fccksetzen des Punktestands f\u00fcr alle Elefanten auf 0\n                Punkte = 0;\n                PlayerPrefs.SetInt(\"PunkteElli\", Punkte);\n                PlayerPrefs.SetInt(\"PunkteOssi\", Punkte);\n            }\n            // Zerst\u00f6ren des Pilzes\n            Destroy(col.gameObject);\n            // Planen des Neuladens der Szene nach 3 Sekunden Wartezeit\n            Invoke(\"NeuLaden\", 3);\n        }\n    }\n</code></pre> <p>Tipp</p> <p>Kleine Wiederholung zur Vererbung: Da wir die \u00c4nderungen in der Elternklasse BouncyFant durchf\u00fchren, brauchen wir dies nicht f\u00fcr jeden Elefanten (Elli, Ossi,...) einzeln zu tun.</p> <p></p> <p>Au\u00dferdem m\u00fcssen wir die Prozedur public virtual void Start() einf\u00fcgen, in der wir den Punktestand und den Punktetext setzen.</p> <p>BouncyFant.cs <pre><code>public virtual void Start(){\n  // Laden des Punktestandes aus den Playerprefs und Anzeigen\n  Punkte = PlayerPrefs.GetInt(\"Punkte\" + Name);\n  PunkteText.text = Name + \" \" + Punkte.ToString();\n  GewinnerText.text = \"\";\n}\n</code></pre></p> <p>Tipp</p> <p>Das Schl\u00fcsselwort virtual gibt an, dass diese Methode in den Child-Klassen \u00fcberschrieben werden kann. Dies ben\u00f6tigen wir, da in Elli.cs und Ossi.cs start() schon definiert ist. Zu den \u00fcberschreibenden Methoden in den Child-Klassen muss man dann das Schl\u00fcsselwort override angeben.</p> <p>Der gesamte Quellcode von BouncyFant.cs sieht nun so aus:</p> <p>BouncyFant.cs <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\n\npublic class BouncyFant : MonoBehaviour\n{\n    protected Rigidbody2D Elefantenkoerper;\n    protected Animator Animation;\n    public string Name;\n    public float MaxGeschwindigkeit = 10;\n    public float Sprungkraft = 300;\n    protected int Punkte;\n    public Text PunkteText;\n    public Text GewinnerText;\n\n    public virtual void Start(){\n      // Laden des Punktestandes aus den Playerprefs und Anzeigen\n      Punkte = PlayerPrefs.GetInt(\"Punkte\" + Name);\n      PunkteText.text = Name + \" \" + Punkte.ToString();\n      GewinnerText.text = \"\";\n    }\n\n    // Prozedur zum Bewegen des Elefanten\n    protected void Gehen(float h)\n    {\n        /* Geschwindigkeit setzen\n            * Die Geschwindigkeit ergibt sich aus aus der Eingabe f\u00fcr die horizontale\n            * Geschwindigkeit und der maximalen H\u00f6chstgeschwindigkeit des Elefanten\n            */\n        Elefantenkoerper.velocity = new Vector2(h * MaxGeschwindigkeit, Elefantenkoerper.velocity.y);\n\n        /* Blickrichtung des Elefanten bestimmen.\n            * Der Vektor f\u00fcr die Blickrichtung soll ein Vektor sein,\n            * der sich aus dem Vorzeichenr\u00fcckgabewert (-1 oder +1)\n            * der horizontalen Bewegungsrichtung (Mathf.Sign(h)) und\n            * dem Skalierungsfaktor auf der x-Achse ergibt.\n            * Der y-Wert des Elefanten bleibt gleich, daher nehmen wir nur den\n            * Skalierungsfaktor \"transform.localScale.y\".       \n            */\n        if (h != 0)\n            transform.localScale = new Vector2(Mathf.Sign(h) *\n                Mathf.Abs(transform.localScale.x), transform.localScale.y);\n\n        /* Die Geschwindigkeit wird auf den Absolutbetrag der horizontalen\n            * Bewegung gesetzt. Negative Geschwindigkeit gibt es nicht.\n            * z.B. wenn ich mit dem Auto im R\u00fcckw\u00e4rtsgang 10km/h fahre, fahre ich\n            * 10km/h in einer R\u00fcckw\u00e4rtsbewegung und nicht \"-10km/h\" ;)\n            */\n        Animation.SetFloat(\"Geschwindigkeit\", Mathf.Abs(h));\n    }\n\n    // Feststellen, ob der Elefant am Boden ist.\n    protected bool AmBoden()\n    {\n        // Abfragen der Grenzen der Kollisionsobjekte\n        Bounds Grenze = GetComponent&lt;Collider2D&gt;().bounds;\n        float Spielraum = Grenze.size.y * 0.1f;\n\n        /* Berechnen einer Position die ein wenig unter der Kante des\n         * Kollisionsobjekts liegt sonst kann es vorkommen, dass der\n         * Elefant nicht springen kann, wenn er ganz still steht.\n         */\n        Vector2 v = new Vector2(Grenze.center.x, Grenze.min.y - Spielraum);\n        // Kollisionsabfrage:  mittels einer Linie  \n        RaycastHit2D Kollision = Physics2D.Linecast(v, Grenze.center);\n\n        // \"true\" zur\u00fcckgeben, wenn das Kollisionsobjekt nicht der Elefant selbst ist.\n        return (Kollision.collider.gameObject != gameObject);\n    }\n\n    // Springen\n    protected void Springen(KeyCode Taste)\n    {\n        // Herausfinden, ob der Elefant irgendwo steht, von wo er abspringen kann\n        bool springenmoeglich = AmBoden();\n\n        /* Wenn der Pfeil nach oben gedr\u00fcckt wird und Springen m\u00f6glich,\n         * d.h. der Elefant hat etwas, von wo er aus wegspringen kann,\n         * dann bekommt der Elefantenk\u00f6rper einen Impuls (Addforce),\n         * entsprechend der von uns gew\u00e4hlten Sprungkraft\n         */\n        if (Input.GetKey(Taste) &amp;&amp; springenmoeglich)\n            Elefantenkoerper.AddForce(Vector2.up * Sprungkraft);\n\n        /*\n         * Wenn der Elefant gerade springt, dann springen auf nicht m\u00f6glich setzen.\n         * Nicht = Rufzeichen(!).\n         */\n        Animation.SetBool(\"Springen\", !springenmoeglich);\n    }\n\n    // Neuladen der Szene nach einer Wartezeit\n    void NeuLaden()\n    {\n        SceneManager.LoadScene(\"sceneBouncyFant\");\n        Time.timeScale = 1.0f;\n    }\n\n    // Beim Ber\u00fchren des Pilzes die Punkte erh\u00f6hen und einen Gewinntext ausgeben.\n    void OnCollisionEnter2D(Collision2D col)\n    {\n        // Falls das Kollisionsobjekt der Pilz ist ...    \n        if (col.gameObject.name == \"Pilz\")\n        {\n            Punkte++; // Erh\u00f6hen des Punktestands um 1\n            // Punktestand dauerhaft speichern,\n            // damit beim Neuladen der Szene der Punktestand nicht verloren geht\n            PlayerPrefs.SetInt(\"Punkte\" + Name, Punkte);\n            // Name und Punkte anzeigen\n            PunkteText.text = Name + \" \" + Punkte.ToString();\n            GewinnerText.text = Name + \"  W I N S !\"; // Gewinnermeldung\n            if (Punkte &gt;= 10)\n            {\n                GewinnerText.text = \"L E V E L   C O M P L E T E D\"; // Geschafft\n                // R\u00fccksetzen des Punktestands f\u00fcr alle Elefanten auf 0\n                Punkte = 0;\n                PlayerPrefs.SetInt(\"PunkteElli\", Punkte);\n                PlayerPrefs.SetInt(\"PunkteOssi\", Punkte);\n            }\n            // Zerst\u00f6ren des Pilzes\n            Destroy(col.gameObject);\n            // Planen des Neuladens der Szene nach 3 Sekunden Wartezeit\n            Invoke(\"NeuLaden\", 3);\n        }\n    }\n}\n</code></pre></p> <p>Achtung</p> <p>Im Moment bekommen wir eine Fehlermeldung, wenn wir das Spiel starten wollen, da in Elli.cs und Ossi.cs eine virtuelle Methode \u00fcberschrieben wird und das Schl\u00fcsselwort override fehlt.  </p> <p>Gehe in das Skript Elli.cs und f\u00fcge zur Prozedur Start() das Schl\u00fcsselwort override ein und rufe am Ende die Methode Start() der Parentklasse auf (verwende daf\u00fcr den Befehl base.Start())</p> <p>Tipp</p> <p>Start() und Vererbung Unity ruft bei der Erzeugung eines Objekts immer automatisch Start() auf. Allerdings nur direkt in der zugeh\u00f6rigen Klasse und nicht auch in allen Parent-Klassen. Das hei\u00dft, damit Start() aus BouncyFant.cs ausgef\u00fchrt wird, wenn Elli bzw. Ossi erzeugt werden, m\u00fcssen wir diese Methode extra aufrufen. Um Methoden aus der Parentklasse aufzurufen verwende das Schl\u00fcsselwort base</p> <p>Der Code f\u00fcr Start() in Elli.cs sollte nun so aussehen:</p> <p>Elli.cs <pre><code>// Anfangseinstellungen setzen\npublic override void Start ()\n{\n  // Den Namen setzen\n  Name = \"Elli\";\n\n  // Elefant mit RigidBody verlinken\n  Elefantenkoerper = GetComponent&lt;Rigidbody2D&gt;();\n\n  // Eine Referenz auf den Animator hinzuf\u00fcgen\n  Animation = GetComponent&lt;Animator&gt;();\n\n  //Setzen von Ellis Farbe auf einen leichten Rotton - Color(Rot, Gr\u00fcn, Blau)\n  GetComponent&lt;SpriteRenderer&gt;().color = new Color(0.96f, 0.85f, 0.8f);\n\n  //Start() in der Parentklasse (Baseclass) aufrufen um Punkte und Punktetext zu setzen\n  base.Start();\n}\n</code></pre></p> <p>Mache nun dasselbe f\u00fcr Ossi.cs.</p> <p>Dem Script von Elli weisen wir nun die entsprechenden Variablen zu indem wir auf das GameObject und dann im Scriptbereich auf dem Punkt \u0298 neben der entsprechenden Variable klicken.</p> <p></p> <p>Bei Ossi tun wir das gleiche, nur, dass wir dem Punkte Text -&gt; TextPunkteOssi zuweisen.</p> <p>Zum Schluss m\u00fcssen wir noch die Achsen beim Eventsystem (das beim Hinzuf\u00fcgen von TextPunkteElli und TextPunkteOssi automatisch erstellt worden ist) umbenennen. Sonst erhalten wir eine Fehlermeldung, dass die Achsen Horizontal und Vertical nicht existieren, weil wir sie zu Beginn in H-AchseElli bzw. V-AchseElli umbenannt haben. Daher nennen wir die Achsen des Eventsystems ebenso H-AchseElli und V-AchseElli.</p> <p></p>"},{"location":"bouncyfant/T08-win/#weiterfuhrende-idee-um-die-kooperation-der-spielerinnen-zu-fordern","title":"Weiterf\u00fchrende Idee um die Kooperation der SpielerInnen zu f\u00f6rdern:","text":"<p>Je schneller man die zehn Punkte beisammen hat, desto h\u00f6her sind die Bonuspunkte, die man am Ende des Levels bekommt. Sp\u00e4ter kann es sogar sein, dass einige Levels gar nicht schaffbar sind, ohne das Elli und Ossi zusammen arbeiten. Eurer Fantasie sind dabei keine Grenzen gesetzt, be creative!</p>"},{"location":"bouncyfant/T09-finetuning/","title":"Teil 9 - Finetuning","text":"<p>Ziel</p> <p>In diesem Kapitel lernst du, wie man einen PlatformEffector hinzuf\u00fcgt, damit deine Figur nicht an den Spielfeldgrenzen stecken bleibt.</p> In diesem Kapitel wirst du... Lernen wie man einen PlatformEffector verwendet"},{"location":"bouncyfant/T09-finetuning/#platform-effector","title":"Platform Effector","text":"<p>Momentan ist das Spiel schon ganz gut spielbar, doch eine Kleinigkeit tr\u00fcbt noch die Freude. Wenn man mit dem Elefanten gegen die Wand springt und dann gleichzeitig die Richtungstaste weiter in diese Richtung gedr\u00fcckt h\u00e4lt, dann bleibt die Spielfigur in der Luft h\u00e4ngen.</p> <p></p> <p>Um das H\u00e4ngenbleiben zu vermeiden, bringen wir einen Platform Effector zum Einsatz. Dazu klicken wir zuerst im der Hierarchy auf die Spielfeldgrenzen und dann im Inspector auf Add Component/Physics 2D/Platform Effector 2D</p> <p> </p> <p>Haben wir den Effector den Spielfeldgrenzen hinzugef\u00fcgt, erhalten wir vorerst noch eine Warnung, dass der Effector erst funktionieren wird, wenn er von einem Collider verwendet wird.</p> <p></p> <p>Daher klicken wir bei den entsprechenden Spielfeldgrenzen, n\u00e4mlich den W\u00e4nden links und rechts, einfach auf Used by Effector und schon sollte der Elefant, wenn wir das Spiel starten,nicht mehr in der Wand h\u00e4ngen bleiben, sondern nach unten rutschen.</p> <p></p> <p>F\u00fcr\u2019s erste war es das einmal mit unserem Tutorial. Sch\u00f6n, dass ihr dabei wart. Man k\u00f6nnte auch sagen, jetzt geht es erst richtig los: Neue Levels, neue Features, neue Spielfiguren, \u2026 Lasst eurer Fantasie freien Lauf.</p> <p>Have Fun!</p>"},{"location":"bouncyfant/T10-deploy/","title":"Teil 10 - Das Spiel ver\u00f6ffentlichen!","text":"<p>Im Moment kann man das Spiel nur \u00fcber Unity starten. Damit das Spiel auch eigenst\u00e4ndig spielbar ist und ver\u00f6ffentlicht werden kann, muss man es noch exportieren.</p> <p>Lernziele</p> <p>In diesem Kapitel lernst du, wie du dein Unityprojekt exportieren kannst, sodass es auch ohne Unity spielbar ist.</p> In diesem Kapitel wirst du... Das Spiel f\u00fcr Windows exportieren Das Spiel f\u00fcr eine Webseite exportieren"},{"location":"bouncyfant/T10-deploy/#export-fur-windows","title":"Export f\u00fcr Windows","text":"<p>Klicke als erstes auf File-&gt;Build &amp; Run</p> <p></p> <p>In den Build Settings kannst du nun einstellen f\u00fcr welche Plattform du exportieren m\u00f6chtest. W\u00e4hle Windows x86. Wenn du das Spiel f\u00fcr Mac oder Linux exportieren willst, w\u00e4hle das entsprechende Betriebssystem aus.</p> <p></p> <p>Tipp</p> <p>Wenn du f\u00fcr eine andere Plattform als Windows exportieren willst, kann es sein, dass du zus\u00e4tzliche Softwarepakete installieren musst. Beispielsweise ben\u00f6tigt man f\u00fcr Android das Android Software Development Kit (Android SDK). Au\u00dferdem muss man sich f\u00fcr evtl. auch noch einmal um die Eingabe k\u00fcmmern, da man auf mobilen Endger\u00e4ten im Normalfall keine Tastatur hat.</p>"},{"location":"bouncyfant/T10-deploy/#playersettings","title":"Playersettings","text":"<p>In den Playersettings kannst du unter anderem festlegen, ob das Spiel standardm\u00e4\u00dfig im Vollbildmodus und mit welcher Aufl\u00f6sung es gestartet werden soll. (Vollbild solltest du deaktivieren, da es im Moment im Spiel selbst noch keine M\u00f6glichkeit gibt das Spiel zu beenden.) Au\u00dferdem kannst du auch den Namen und Companyname eingeben.</p> <p></p>"},{"location":"bouncyfant/T10-deploy/#build","title":"Build","text":"<p>Wenn du alle Einstellungen vorgenommen hast, klicke in den Buildsettings auf Build, w\u00e4hle einen geeigneten Ort, benenne die Datei Bouncyfant.exe und klicke auf Speichern.</p> <p>Wenn der Buildvorgang zu Ende ist, findest du in dem von dir festgelegten Ordner die Datei Bouncyfant.exe sowie einen Ordner Bouncyfant_Data.</p> <p></p>"},{"location":"bouncyfant/T10-deploy/#das-spiel-starten-und-veroffentlichen","title":"Das Spiel starten und ver\u00f6ffentlichen","text":"<p>Nun kannst du das Spiel mit einem Doppelklick auf die Datei Bouncyfant.exe starten. Wenn du das Spiel ver\u00f6ffentlichen, oder einer Freundin/einem Freund geben m\u00f6chtest, musst du einfach Bouncyfant.exe und Bouncyfant_Data weitergeben und es kann auf jedem aktuellen Windowscomputer gestartet werden.</p>"},{"location":"bouncyfant/T10-deploy/#export-fur-das-web","title":"Export f\u00fcr das Web","text":"<p>Klicke als erstes auf File-&gt;Build &amp; Run</p> <p>W\u00e4hle in den Buildsettings unter Platform WebGL aus.</p> <p>Falls bei dir \"No WebGL module loaded\" aufscheint, musst du erst noch das WebGL Modul f\u00fcr Unity herunterladen. Klicke daf\u00fcr auf Open Download Page und installiere das Paket. </p> <p></p> <p>Achtung</p> <p>F\u00fcr die Installation ben\u00f6tigst du Administratorenrechte und du musst Unity schlie\u00dfen.</p> <p>Wenn WebGL installiert ist, klicke auf Build und w\u00e4hle einen geeigneten Ordner, wo das Spiel gespeichert werden soll.</p> <p></p> <p>Das Spiel kannst du nun starten indem du die Datei index.html mit einem Webbrowser (z.B. Firefox) \u00f6ffnest.</p> <p></p> <p>Tipp</p> <p>Auch wenn du dein Spiel eigentlich nicht auf einer Webseite im Internet laufen lassen m\u00f6chtest, eignet sich der Export mit WebGL sehr gut, da es dann auf den meisten Betriebssystemen spielbar ist.</p> <p>Achtung</p> <p>Wenn du das Spiel mit Google Chrome spielen m\u00f6chtest kann es sein, dass es auf Anhieb nicht funktioniert. Chrome erlaubt es standardm\u00e4\u00dfig n\u00e4mlich nicht Skripte von lokalen Dateien auszuf\u00fchren. Um das Spiel dennoch lokal mit Chrome spielen zu k\u00f6nnen, kannst du Chrome mit dem Parameter <code>--allow-file-access-from-files</code> von der Konsole aus starten und in der Adressleiste dann den Dateipfad des Spiels eingeben.  </p>"},{"location":"fundamentals/T01-userinterface/","title":"Bedienoberfl\u00e4chen","text":"<p>Lernziele</p> <p>F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden:</p> <ul> <li>Unity zur Entwicklung von Spielszenen und</li> <li>Visual Studio zum Schreiben von Programm-Scripts.</li> </ul> <p>In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst.</p>"},{"location":"fundamentals/T01-userinterface/#unity-bedienoberflache","title":"Unity Bedienoberfl\u00e4che","text":"<p>Als Analogie f\u00fcr das Erschaffen eines Spiels kannst du dir vorstellen, einen Film zu machen. Unity besteht aus Men\u00fcs und Panels (=Bedienfelder), die verschiedene Aspekte des Spiel-Projekts umfassen. Wie im Film bestehen in Unity Spiele aus einer oder mehrerer Szene(n).</p> <ul> <li> <p>Im Hierarchy Panel findest du alle GameObjects - Requisiten -, die du in der Szene, an der du gerade arbeitest, verwendest. Diese sind hierarchisch - nach Zugeh\u00f6rigkeit und nach der Reihe - geordnet. Die Reihenfolge kannst du per Drag and Drop ver\u00e4ndern.</p> </li> <li> <p>Im Inspector Panel kannst du Eigenschaften eines GameObjects ver\u00e4ndern, sowie Komponenten an ein GameObject \"anheften\".</p> </li> <li> <p>Die Szene, an der du momentan arbeitest, wird im Scene Panel angezeigt. Hier kannst du Requisiten aus dem Hierarchy Panel in der Szene anordnen.</p> </li> <li> <p>Das Game Panel zeigt deine aktuelle Szene aus der Kameraperspektive. In diesem Panel kannst du dein Spiel testen, sobald du es startest.</p> </li> <li> <p>Wie es beim Filmemachen ein Requisiten-Lager gibt, so bietet Unity das Project Panel. Hier sind alle Assets - alle \"G\u00fcter\" oder Resourcen - deines Spiel-projekts auffindbar. Das Projekt-Panel ist als Dateisystem organisiert. Hier sammelst du alle Grafiken f\u00fcr dein Spiel, sowie alle Soundeffekte, Spielobjekt-Prototypen oder Szenenaufbauten deiner Spiel-Szenen. Um mehr \u00dcbersicht zu haben, k\u00f6nnen Assets in Ordnern gespeichert werden. Assets werden als GameObjects, Komponenten oder Komponenteneigenschaften in einer Szene verwendet.</p> </li> </ul> <p></p> <p>Szenen in Unity sind hierarchisch - in Ebenen - organisiert. Prinzipiell werden GameObjects in der Folge angezeigt, in der sie erzeugt werden. Per Drag and Drop k\u00f6nnen diese neu angeordnet werden oder gruppiert werden.</p> <p>Tipp</p> <p>Sowohl das Szenen-Panel wie auch das Projekt-Panel haben eine Suchfunktion.</p>"},{"location":"fundamentals/T01-userinterface/#neues-projekt-anlegen","title":"Neues Projekt anlegen","text":"<p>Arbeitsauftrag</p> <p>Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\".</p> <p></p> <p>ACHTUNG</p> <p>Merke dir, wo du dein Projekt am Computer anlegst.</p> <p>Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern.</p> <p>TIPP</p> <p>Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" &gt; \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen.</p>"},{"location":"fundamentals/T01-userinterface/#spiel-starten-und-stoppen","title":"Spiel starten (und stoppen)","text":"<p>ACHTUNG</p> <p>Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst!</p>"},{"location":"fundamentals/T01-userinterface/#speichern","title":"Speichern","text":"<p>In Unity k\u00f6nnen Szeneneinstellungen mit \"Save Scene\" gespeichert werden. Projekteinstellungen werden mit \"Save Project\" gespeichert.</p> <p></p>"},{"location":"fundamentals/T01-userinterface/#visual-studio-bedienoberflache","title":"Visual Studio Bedienoberfl\u00e4che","text":"<p>Visual Studio ist eine Programmierumgebung. C#-Skripte k\u00f6nnen in Visual Studio geschrieben werden.</p> <p></p> <p>Damit geschriebener Code in Unity ausgef\u00fchrt werden kann, musst du dein Skript in Visual Studio speichern.</p> <p>Tipp</p> <p>Eine Tastenkombination f\u00fcr Speichern (in Visual Studio) ist: <code>strg + s</code></p>"},{"location":"fundamentals/T01-userinterface/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li> <p>Unity User Interface (englisch)</p> </li> <li> <p>Unity Hauptfenster (englisch)</p> </li> <li> <p>Visual Studio Grundlagen</p> </li> </ul>"},{"location":"fundamentals/T02-firststeps/","title":"Erste Schritte","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C#.</p>"},{"location":"fundamentals/T02-firststeps/#was-ist-ein-algorithmus","title":"Was ist ein Algorithmus?","text":"<p>Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus?</p> <p>Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C#. Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte.</p> <p>Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten.</p> <p></p> <p>\u00dcbung</p> <p>Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen.</p>"},{"location":"fundamentals/T02-firststeps/#erste-schritte-in-unity","title":"Erste Schritte in Unity","text":""},{"location":"fundamentals/T02-firststeps/#spielobjekte-und-komponenten","title":"Spielobjekte und Komponenten","text":"<p>In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject.</p> <p>Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform, mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben.</p> <p>C#-Skripte werden einem Spielobjekt \u00fcber \"Add Component\" &gt; \"New Script\" \"angeheftet\".</p> <p>Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet  oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren.</p> <p></p> <p>\u00dcbung</p> <p>Beschreibe in eigenen Worten, wof\u00fcr die Spielobjekt-Komponenten im obigen Bild verwendet werden. SpriteRenderer ist bereits beschrieben.</p>"},{"location":"fundamentals/T02-firststeps/#projektdateien","title":"Projektdateien","text":"<p>Projektdateien findest du in Unity unter \"Project\" &gt; \"Assets\". Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren.</p> <p></p> <p>Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden.</p> <p>Arbeitsauftrag</p> <p>Lege folgende Ordner im \"Assets\"-Bereich von Unity an:</p> <ul> <li>Sprites: f\u00fcr alle 2D Grafiken</li> <li>Scripts: f\u00fcr alle C# Programm-Skripte</li> <li>Vorlagen: f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden</li> <li>Material: f\u00fcr physikalische Materialeigenschaften</li> </ul> <p>Tipp</p> <p>Du gelangst per Rechtsklick auf den \"Assets\"-Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest.</p> <p>Um ein neues Script f\u00fcr ein GameObject zu erstellen, mache folgendes: </p> <p>Arbeitsauftrag</p> <p>Lege die Sprite-Datei elef.png im Ordner \"Sprites\" in deinem Unity Projekt ab. Ziehe das neue Sprite anschlie\u00dfend vom Project Panel in das Hierarchy Panel. Nenne das neue GameObject \"Elli\". Hefte dem neu erzeugten GameObject Elli ein C#-Skript namens \"HalloElli\" an.</p> <p>Tipp</p> <p>Ein Sprite ist eine 2D Grafik. Das hei\u00dft, diese Grafik hat 2 Dimensionen. Sie kann auf der x- und der y-Achse positioniert und skaliert(=vergr\u00f6\u00dfert und verkleinert) werden. Eine Tiefendimension (z-Achse), die man etwa bei 3D-Spielen verwendet, fehlt.</p>"},{"location":"fundamentals/T02-firststeps/#erste-schritte-in-c","title":"Erste Schritte in C#","text":"<p>C# (C Sharp) ist (in erster Linie) eine objektorientierte Programmiersprache. Unity-Skripte kann man in C# (oder in Javascript) schreiben.</p>"},{"location":"fundamentals/T02-firststeps/#hallo-elli","title":"Hallo Elli!","text":"<p>Arbeitsauftrag</p> <p>\u00d6ffne das C#-Skript \"HalloElli.cs\" in Visual Studio per Doppelklick auf diese Datei im Unity Projekt Panel.</p> <p>Bist du bereit f\u00fcr dein erstes C#-Skript? Kopiere nachfolgenden Programmcode nach \"HalloElli.cs\" und ersetze dessen Inhalte.</p> <pre><code>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class HalloElli : MonoBehaviour {\n\n    int punkte = 1;\n    string troeten = \"Tr\u00f6\u00f6\u00f6t.\";\n\n    void OnDisable()\n    {\n        Debug.Log (\"Hallo Elli!\");\n    }\n}\n</code></pre> <p>Tipp</p> <p>Du kannst die Tastenkombination <code>strg + c</code> (gleichzeitig dr\u00fccken) zum Kopieren und <code>strg + v</code> zum Einf\u00fcgen verwenden.</p> <p>Zur\u00fcck in Unity, dr\u00fccke auf Start.</p> <p></p> <p></p> <p>Anschlie\u00dfend, \u00f6ffne das Console Panel. In diesem werden R\u00fcckmeldungen des Programms, wie etwa Debug-Nachrichten ausgegeben.</p> <p></p> <p>Nun, klicke das GameObject Elli an. Im Inspector findest du neben dem GameObject Namen eine Tick-Box. Klicke die Tick-Box an.</p> <p></p> <p></p> <p>Arbeitsauftrag</p> <p>Notiere die Ausgabe in der Konsole.</p>"},{"location":"fundamentals/T02-firststeps/#programmstruktur-in-c","title":"Programmstruktur in C#","text":"<p>Nachfolgend findest du die typische Programmstruktur eines C#-Skripts (mit Erkl\u00e4rungen):</p> <pre><code>//BIBLIOTHEKEN = PROGRAMMTEILE, DIE IN DAS SCRIPT IMPORTIERT WERDEN\nusing System; //using = EIN SCHL\u00dcSSELWORT IN C#; using System HEI\u00dfT: verwende alle Klassen im Namespace(= Programmateil) System\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine; //DIESE BIBLIOTHEK ERM\u00d6GLICHT ETWA DEN ZUGRIFF AUF DIE UNITY SPIEL-ENGINE\n\n\n//EINE KLASSE = class bezeichnung {... Inhalte der Klasse ...}\npublic class HalloElli : MonoBehaviour //DIESE KLASSE \"ERBT\" VON MonoBehaviour - IST ALSO F\u00dcR EIN GAMEOBJECT\n{\n    //KLASSEN-ATTRIBUTE (EIGENSCHAFTEN) WERDEN IN VARIABLEN GEFASST\n    int punkte = 1;\n    string troeten = \"Tr\u00f6\u00f6\u00f6t.\";\n\n    //FUNKTION(EN) DER KLASSE\n    void OnDisable()\n    {\n        //STATEMENT(S) - AUSDR\u00dcCKE\n        Debug.Log (\"Hallo Elli!\");\n\n        /* Dies\n         * ist ein\n         * mehrzeiliges\n         * Kommentar\n         */\n\n        //Dies ist ein einzeiliges Kommentar\n    }\n}\n</code></pre> <p>ACHTUNG</p> <ul> <li>Gro\u00df- und Kleinschreibung wird beachtet!</li> <li>Alle Statements und Ausdr\u00fccke werden mit <code>;</code> beendet!</li> <li>Jedes C#-Programm startet mit einer main-Funktion! (Diese wird von Unity im Hintergrund aufgerufen, wenn du dein Spiel startest.)</li> </ul>"},{"location":"fundamentals/T02-firststeps/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li> <p>Grundlagen der Sprache C# (aus dem Visual C# Handbuch)</p> </li> <li> <p>Introduction to Unity Tutorial Teil 1 (Ray Wenderlich, Englisch)</p> </li> <li> <p>Introduction to Unity Tutorial Teil 2 (Ray Wenderlich, Englisch)</p> </li> </ul>"},{"location":"fundamentals/T03-debugging/","title":"Fehler und De-Bugging","text":"<p>Lernziele</p> <p>Hier lernst du, wie du etwas in Unity \"r\u00fcckg\u00e4ngig machen\" kannst. Au\u00dferdem lernst du den Begriff \"De-Bugging\" kennen. Du lernst, wo dir in Unity Programmierfehler angezeigt werden und wie du damit umgehen kannst.</p> <p>Das Sch\u00f6ne am Programmieren ist: Fehler machen geh\u00f6rt dazu!</p> <p>Fehler sind super Lernm\u00f6glichkeiten!</p> <p>Auch Profis machen Fehler.</p>"},{"location":"fundamentals/T03-debugging/#es-klappt-nicht-was-nun","title":"Es klappt nicht! Was nun?","text":"<p>Was kann man tun, wenn was nicht klappt?</p> <p>Wenn du dich vertippt hast oder unabsichtlich was gel\u00f6scht hast, kannst du das in Unity r\u00fcckg\u00e4ngig machen.</p> <p>Tipp</p> <p>R\u00fcckg\u00e4ngig machen kannst du mit der Tastenkombination: <code>strg + z</code></p> <p>Ok... aber was, wenn du auf Start dr\u00fcckst, aber nichts passiert?</p> <p>Schau in der Konsole nach, was da geschrieben steht.</p> <p></p> <p>Unity gibt in der Konsole Warnungen und Fehlermeldungen aus, sobald du das Spiel gestartet hast.</p> <p>Warnungen und Fehlermeldungen beinhalten \u00fcblicherweise je eine Fehlerbeschreibung (auf Englisch) UND eine Zeilenangabe, auf welcher Zeile (und in welchem Skript) der Fehler aufgetreten ist.</p>"},{"location":"fundamentals/T03-debugging/#de-bugging-in-unity","title":"De-Bugging in Unity?","text":"<p>Hast du eine Fehlerbeschreibung, aber verstehst noch nicht, was da steht?</p> <ul> <li> <p>Lese im Grundlagentutorial nach, ob da was zu deinem Fehler steht (Es gibt auch eine Suchfunktion!)</p> </li> <li> <p>Frag eineN KollegIn</p> </li> <li> <p>Wenn es ein Hilfeforum gibt: Schreib deinen Fehler in das Forum</p> </li> <li> <p>Frag eineN erfahreneN LernerIn (etwa eineN TutorIn oder eine Lehrperson)</p> </li> <li> <p>Im Internet gibt es auch Hilfeforen: etwa das Unity Forum oder StackOverflow</p> </li> </ul> <p>De-Bugging bedeutet, dass du Computer-Programm-Fehler (Bugs) ausbesserst.</p> <p>Hier ist ein Bild vom ersten echten \"Bug\", der jemals in einem Computerprogramm gefunden wurde! ;)</p>"},{"location":"fundamentals/T03-debugging/#de-bugging-in-visual-studio","title":"De-Bugging in Visual Studio","text":"<p>Hast du eine Fehlerbeschreibung und eine Zeilenangabe, kannst du die Zeile in deinem C# Skript in Visual Studio suchen.</p> <ul> <li> <p>Vielleicht hast du nur einen <code>;</code>(Strichpunkt) vergessen?</p> </li> <li> <p>Oder Gro\u00df- und Kleinschreibung bei Bezeichnungen nicht eingehalten?</p> </li> </ul> <p>Arbeitsauftrag</p> <p>F\u00fcge folgenden Programm-Teil in deinem HalloElli.cs Skript nach</p> <p><code>void OnDisable() {     Debug.Log (\"Hallo Elli!\"); }</code>  ein:</p> <pre><code>void OnEnable()\n{\n    Debug.Log(\"Elli ist wieder sichtbar!\")\n}\n</code></pre> <p>Finde den Fehler und verbessere den Quellcode.</p>"},{"location":"fundamentals/T03-debugging/#breakpoints","title":"Breakpoints","text":"<p>Um zu sehen, was sich in deinem Skript abspielt, wenn du in Unity auf Start dr\u00fcckst, k\u00f6nnen Breakpoints (Haltepunkte) gesetzt werden. Hierf\u00fcr klickst du in Visual Studio links neben die Zeilennummer, wo du einen Haltepunkt setzen willst.</p> <p></p> <p>Um in dem Debug-Modus zu kommen, klicke auf Debuggen -&gt; Debugging starten (oder F5) in Visual Studio. Anschlie\u00dfend kannst du dein Spiel in Unity starten. Sobald die Ausf\u00fchrung deines Programms an die Stelle kommt, wo dein Haltepunkt gesetzt ist, bleibt es stehen.</p> <p>Nun kannst du die Inhalte von Variablen im aktuellen Zustand beim Haltepunkt einsehen (im Fenster links unten, wenn du auf \"this\" draufklickst), indem du den Mauszeiger auf die Variable bewegst.</p> <p>Mit der Taste \"N\u00e4chste Anweisung anzeigen\" kannst das Programm nach einem Haltepunkt weiterlaufen lassen.</p> <p></p>"},{"location":"fundamentals/T03-debugging/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li> <p>Unity Forum</p> </li> <li> <p>Unity User Manual</p> </li> <li> <p>StackOverflow</p> </li> <li> <p>Tutorial f\u00fcr Fortgeschrittene zum De-Buggen in Visual Studio (englisch)</p> </li> </ul>"},{"location":"fundamentals/T04-variables/","title":"Variablen","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du was Variablen beim Programmieren sind. Du lernst, wie du eine Variable erzeugen kannst durch Deklarieren und Initialisieren. Au\u00dferdem lernst du, was Datentypen sind.</p> <p></p> <p>Das bedeutet: Der Integer-Variable \"meineVariable\" wird der Wert 1 zugewiesen. Man kann auch sagen: Die Integer-Variable \"meineVariable\" wird mit dem Wert 1 initialisiert.</p>"},{"location":"fundamentals/T04-variables/#wozu-variablen","title":"Wozu Variablen?","text":"<ul> <li>Mit Variablen kannst du Daten speichern und \u00e4ndern.</li> </ul> <p>Ein Beispiel: <pre><code>int x = 1;\nint y = 2;\nint z = x + y;\n</code></pre></p> <p>\u00dcbung</p> <p>Welchen Wert hat z?</p> <ul> <li> <p>Letztlich bezeichnen Variablen einen Speicherplatz. Man kann sich das etwa wie ein Postfach vorstellen, auf dem eine Address-Bezeichnung steht.</p> </li> <li> <p>Diesem Speicherplatz k\u00f6nnen Werte (also Daten) zugewiesen werden. Zuweisen kann man in C# mit dem Zuweisungs-Operator <code>=</code>.</p> </li> </ul> <p></p>"},{"location":"fundamentals/T04-variables/#deklarieren-und-initialisieren","title":"Deklarieren und Initialisieren","text":"<ul> <li>Deklarieren bedeutet, dass man eine Variable benennt und ihr einen Datentyp zuordnet.</li> </ul> <p>Datentypen bezeichnen die Form der Daten, also was die Nullen und Einser in einer Bit-Folge jeweils bedeuten.</p> <p>Tipp</p> <p>Ein Bit ist die kleinste Einheit, mit der Computer rechnen. Ein Bit ist entweder 0 oder 1. Mit Bits kann man im Bin\u00e4rsystem rechnen.</p> <ul> <li>Initialisieren bedeutet, dass man einer Variable das erste Mal einen Wert zuweist.</li> </ul> <p>\u00dcbung</p> <p>Analysiere folgenden Quellcode. In welcher Zeile wird eine Variable deklariert? Wo wird eine Variable deklariert und initialisiert?</p> <pre><code>    int ersteVariable;\n    int zweiteVariable = 2;\n</code></pre>"},{"location":"fundamentals/T04-variables/#datentypen","title":"Datentypen","text":"<p>Datentypen zeigen an, welche Art von Daten einer Variable zugewiesen werden k\u00f6nnen. Sie zeigen an, wie Daten (also Folgen von Nullen und Einsen) interpretiert werden sollen.</p> <p>Wichtige Datentypen sind:</p> Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 32-bit Float (Gleitkommazahlen) -3,4mal10hoch38 bis 3,4mal10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0mal10hoch-324 bis (+/-)1,7mal10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null <p>Arbeitsauftrag</p> <p>Erg\u00e4nze die Funktion <code>OnDisable()</code> im Skript halloelli.cs um zwei Variablen: <code>string spiel</code> und <code>int preis</code>. Weise der Variable \"spiel\" den Wert <code>\"Elli Dance\"</code> zu. Weise der Variable \"preis\" den Wert <code>5</code> zu. Erg\u00e4nze Debug.Log() um folgenden string: <code>\"Das Spiel\" + spiel + \"kostet\" + preis + \"Euro.\"</code></p> <p>Tipp</p> <p><code>+</code> ist der Additions-Operator. Bei Zahlen addiert dieser, strings werden durch diesen zusammengef\u00fcgt.</p>"},{"location":"fundamentals/T04-variables/#umwandlung-von-datentypen","title":"Umwandlung von Datentypen","text":"<p>Datentypen k\u00f6nnen manchmal in andere Datentypen umgewandelt werden. Folgende Funktionen erm\u00f6glichen neben anderen eine Typ-Umwandlung:</p> <p><code>.ToInt(), .ToBool(), .ToString()</code></p> <p>Ein Beispiel:</p> <pre><code>int i = 75;\nstring zahl = i.ToString();\n</code></pre>"},{"location":"fundamentals/T04-variables/#variablen-bereich-scope","title":"Variablen-Bereich (Scope)","text":"<p>Variablen, die au\u00dferhalb eines Code-Blocks - gekennzeichnet durch <code>{ ... }</code> - deklariert (also angegeben) werden, k\u00f6nnen im Code-Block verwendet werden. Variablen, die im Code-Block angegeben werden, k\u00f6nnen nur dort verwendet werden.</p> <p>Wird einer Variable bei der Deklarierung das Schl\u00fcsselwort <code>public</code> vorgesetzt, so k\u00f6nnen auch Objekte darauf zugreifen, denen das Skript nicht \"angeheftet\" ist. Wenn eine Variable <code>private</code> ist, so kann nur das GameObject, dem das Skript angeheftet ist, darauf zugreifen. Mehr dazu</p>"},{"location":"fundamentals/T04-variables/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li> <p>Variablen schnell erkl\u00e4rt (Video)</p> </li> <li> <p>Unity Variables and Functions Tutorial (englisch)</p> </li> <li> <p>Scope and Access Control in Unity Tutorial  (englisch)</p> </li> </ul>"},{"location":"fundamentals/T05-operators/","title":"Operatoren","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, was ein Operator ist. Du lernst verschiedene Operatoren kennen und lernst wie du sie in einem Programm verwendest. Wenn du nicht mehr wei\u00dft was die Operatoren tun, kannst du in diesem Kapitel nachschauen.</p> <p>Ein Operator ist eine Aktion, die man mit einer oder mehreren Variable(n) oder Objekt(en) durchf\u00fchren kann.</p>"},{"location":"fundamentals/T05-operators/#wozu-operatoren","title":"Wozu Operatoren?","text":"<p>Mit Operatoren kannst du deine Variablen ver\u00e4ndern bzw. neu berechnen. Operatoren entsprechen immer einer Rechenmethode in der Mathematik.</p>"},{"location":"fundamentals/T05-operators/#arithmetische-operatoren","title":"Arithmetische Operatoren","text":"<p>Arithmetische Operatoren erlauben uns einfache Berechnungen durchzuf\u00fchren, fast so wie ein Taschenrechner!</p> <p>ACHTUNG</p> <p>Arithmetische Operatoren rechnen in der Regel von Links nach Rechts. Es gilt Punkt vor Strich Rechnung! Du kannst Klammern verwenden, um die Reihenfolge der Berechnung anzugeben. Wie in Mathematik werden Begriffe in Klammern zuerst berechnet. </p> Operator Rechenmethode + Addition - Subtraktion * Multiplikation / Division % Modulo (Rest d. Division)"},{"location":"fundamentals/T05-operators/#operator","title":"= Operator","text":"<p><code>=</code> ist der Zuweisungsoperator. Du verwendest ihn, um ein Ergebnis einer Variable zuzuweisen, d.h. das Ergebnis speichern. Der Operator speichert was rechts vom <code>=</code> steht in die Variable links davon.</p> <pre><code>// = speichert den Wert 3 in der Variable x ab.\nx = 3;\n</code></pre> <p>Den Zuweisungsoperator <code>=</code> verwendet man folgenderma\u00dfen:</p> <p><pre><code>//Wir erstellen eine Variable \"lieblingszahl\" mit dem Wert 1.\nint lieblingszahl = 1;\n//Wir verwenden = und weisen lieblingszahl einen neuen Wert zu.\nlieblingszahl = 3;\n//Ab sofort steht in *lieblingszahl* die Zahl 3 anstatt 1.\nDebug.Log (\"Hallo, meine Lieblingszahl ist\" + lieblingszahl);\n</code></pre> In der Konsole steht nach Aufruf: \"Hallo, meine Lieblingszahl ist 3\" Wir sehen also, der Wert <code>lieblingszahl</code> und <code>name</code> sind jetzt anders, weil wir einen neuen Wert mit dem Operator <code>=</code> zugewiesen haben.</p>"},{"location":"fundamentals/T05-operators/#operator_1","title":"<code>+</code> Operator","text":"<p>Der Additionsoperator <code>+</code> addiert Variablen. Du kannst damit die Summe von Variablen berechnen.</p> <p><pre><code>int a = 1;      \nint b = 2;      \nint c = 0;\n\nDebug.Log (a+b);\nDebug.Log (\" \");\nDebug.Log (b+3);\n\nc = a+b;\n</code></pre> In der Konsole steht nach Aufruf \"3 5\". 3 ist das Ergebnis von \"a+b\" was wir in c gespeichert haben und ausgeben. 5 ist das Ergebnis von \"b+3\" denn in b ist 2 gespeichert.</p> <p>Arbeitsauftrag</p> <p>Verwende den Additionsparameter <code>+</code> um die Zahlen b und c zu addieren. Gib dein Ergebnis mit Debug.Log() aus. Je nachdem ob du deinen Code vor oder nach <code>c = a+b</code> einf\u00fcgst ist das Ergebnis anders. Warum?</p> <p>Du kannst den Additionsoperator <code>+</code> auch verwenden, um Strings zu kombinieren.</p> <p><pre><code>String teil1 = \"Wasch\";\nString teil2 = \"maschine\";\n\nDebug.Log (teil1 + teil2);\nDebug.Log (\" Bohr\" +teil2);\nDebug.Log (\"S\u00fc\u00dfes\" + \" oder \" + \"Saures\");\n</code></pre> In der Konsole steht jetzt: Waschmaschine Bohrmaschine S\u00fc\u00dfes oder Saures</p> <p>Arbeitsauftrag</p> <p>Verwende den Additionsparameter <code>+</code> um einzelne W\u00f6rter (<code>Strings</code>) zu einem Satz zu verbinden. Gib dein Ergebnis mit Debug.Log() aus.</p> <p>Tipp</p> <p>Wenn du Strings kombinierst, um einen Satz zu erstellen, musst du Leerzeichen anf\u00fcgen. Sonst kleben die W\u00f6rter zusammen.</p>"},{"location":"fundamentals/T05-operators/#-operator","title":"<code>-</code> Operator","text":"<p>Den Subtraktionsoperator <code>-</code> verwendet man um 2 Variablen zu subtrahieren. Die Rechte Zahl wird von der Linken abgezogen.</p> <p><pre><code>int a = 3;\na = a - 2;\nDebug.Log(a);\n</code></pre> In der Konsole steht nach dem Ausf\u00fchren 1.</p>"},{"location":"fundamentals/T05-operators/#operator_2","title":"<code>*</code> Operator","text":"<p>Den Multiplikationsoperator <code>*</code> verwendet man um 2 Variablen zu multiplizieren. Vergiss nicht Klammern zu verwenden damit du auch wirklich das berechnest was du vor hast.</p> <pre><code>int a = 3;\nint b = a*5;\nDebug.Log(b);\n</code></pre> <p>In der Konsole steht nach dem Ausf\u00fchren 15.  </p> <ul> <li>Ohne Klammern: <pre><code>int a = 3;\nint b = a+2*5;\nDebug.Log(b);\n</code></pre> In der Konsole steht nach dem Ausf\u00fchren 13.  </li> </ul>"},{"location":"fundamentals/T05-operators/#operator_3","title":"<code>/</code> Operator","text":"<p>Den Divisionsoperator <code>/</code> verwendet man um 2 Variablen miteinander zu dividieren. <pre><code>int a = 15;\nint b = a/3;\nDebug.Log(b);\n</code></pre> In der Konsole steht nach dem Ausf\u00fchren 5.  </p> <p>ACHTUNG</p> <p>Es gilt Punkt vor Strich Rechnung. Pass also auf, dass du die richtigen Klammern setzt.</p> <p><pre><code>int a = 15;\nint b = a/3+2;\nDebug.Log(b);\n</code></pre> In der Konsole steht nach dem Ausf\u00fchren 7.</p> <p><pre><code>int a = 15;\nint b = a/(3+2);\nDebug.Log(b);\n</code></pre> In der Konsole steht nach dem Ausf\u00fchren 3.  </p>"},{"location":"fundamentals/T05-operators/#operator_4","title":"% Operator","text":"<p>Der Modulo Operator <code>%</code> wird verwendet, um eine Division mit Rest durchzuf\u00fchren. Das Ergebnis dieser Berechnung ist aber nur der Restbetrag.</p> <p><pre><code>int a = 10;\nint b = 10%3;\nDebug.Log(b);\n</code></pre> In der Konsole steht nach dem Ausf\u00fchren 1, denn 10 dividiert durch 3 ist 3 + 1 Rest. Der Modulo Operator <code>%</code> liefert nur den Rest zur\u00fcck.</p>"},{"location":"fundamentals/T05-operators/#logische-operatoren","title":"Logische Operatoren","text":"<p>Die Auswertung von logischen Operatoren gibt an, ob ein logischer Ausdruck (auch genannt <code>boolean</code> nach George Boole)- oder eine Verkn\u00fcpfung mehrerer  Wahr (true) oder Falsch (false) ist.  Mit diesen Operatoren kann man also Bedingungen schreiben. In einigen Programmiersprachen werden statt <code>true</code> und <code>false</code> auch die int-Zahlenwerte 1 und 0 akzeptiert.</p> <p>Logischen Operatoren sind besonders wichtig bei Verzweigungen. Wie noch gezeigt wird, wird der Code innerhalb einer Verzweigung nur ausgef\u00fchrt, wenn die Bedinung Wahr ergibt.</p> Vergleichsoperator Bedeutung &gt; ist gr\u00f6\u00dfer als &gt; ist kleiner als &gt;= ist gr\u00f6\u00dfer gleich &lt;= ist kleiner gleich <p>Neben den Vergleichsoperatoren in der oberen Tabelle die du bestimmt aus dem Mathematikunterricht kennst gibt es noch weitere Operatoren die wir beim Programmieren brauchen.</p> Vergleichsoperator Funktion <code>&amp;&amp;</code> UND <code>||</code> ODER <code>!</code> NICHT <code>==</code> GLEICH <code>!=</code> UNGLEICH <p>Tipp</p> <p>Wenn es dir schwer f\u00e4llt diese Operatoren zu verstehen, stell dir am besten immer die Frage:\"Ist dieser Ausdruck wahr? Falls ja, ist das Ergebnis <code>true</code>. Falls nein, ist das Ergebnis <code>false</code>. Zum Beispiel bei dem Begriff <code>5 &lt; 10</code> fragst du dich: \"Ist 5 kleiner als 10?\" - \"Ja.\" Das Ergebnis ist also <code>true</code>.</p>"},{"location":"fundamentals/T05-operators/#operator-und","title":"<code>&amp;&amp;</code> Operator (UND)","text":"<p>Der <code>&amp;&amp;</code> Operator wird verwendet um Aussagen zu verkn\u00fcpfen. Damit der zusammengesetzte Begriff in der Klammer <code>true</code> ergibt m\u00fcssen alle mit <code>&amp;&amp;</code> verkn\u00fcpften Aussagen <code>true</code> sein. <pre><code>int a = 2\n(a &lt; 3) &amp;&amp; ( a &lt; 5)   // Dieser Ausdruck ergibt true, weil beide Aussagen wahr sind.\n\n(a &lt; 1) &amp;&amp; ( a &lt; 5)   // Dieser Ausdruck ergibt false, weil zumindest eine der beiden Aussagen falsch ist.\n</code></pre></p>"},{"location":"fundamentals/T05-operators/#operator-oder","title":"<code>||</code> Operator (ODER)","text":"<p>Der <code>||</code> Operator wird verwendet um Aussagen zu verkn\u00fcpfen. Damit der zusammengesetzte Begriff in der Klammer <code>true</code> ergibt muss mindestens eine Aussage <code>true</code> sein. Nur wenn keine einzige <code>true</code> Aussage ist, ist der gesamte Begriff <code>false</code>. <pre><code>int a = 2\n(a &lt; 3) || ( a &lt; 5)   // Dieser Ausdruck ergibt true, da zumindest eine Aussage wahr ist.\n(a &lt; 1) || ( a &gt; 100)   // Dieser Ausdruck ergibt false, weil ALLE Aussagen falsch ist.\n</code></pre></p>"},{"location":"fundamentals/T05-operators/#operator-nicht","title":"<code>!</code> Operator (NICHT)","text":"<p>Wenn du den <code>!</code> Operator vor einen Ausdruck schreibst, drehst du du das Ergebnis um wie am Gegenteil Tag. <pre><code>int a = 2\n(a &lt; 0)   // Dieser Ausdruck ergibt false.\n!(a &lt; 0)  // Dieser Ausdruck ergibt true, weil der NOT Operator das Ergebnis umdreht.\n\n(a &lt; 1) || ( a &gt; 100)   // Dieser Ausdruck ergibt false, weil ALLE Aussagen falsch ist.\n</code></pre></p>"},{"location":"fundamentals/T05-operators/#operator-gleich","title":"<code>==</code> Operator (GLEICH)","text":"<p>Der <code>==</code> Operator pr\u00fcft ob die Ausdr\u00fccke auf beiden Seiten identisch oder gleich sind. Er gibt <code>true</code> zur\u00fcck wenn sie gleich sind und <code>false</code> wenn sie nicht gleich sind.</p>"},{"location":"fundamentals/T05-operators/#int-a-2-a-2-dieser-ausdruck-ergibt-true-10-10-auch-das-ergibt-true-a-5-das-ergibt-false-weil-der-wert-in-a-2-nicht-gleich-5-ist","title":"<pre><code>int a = 2\n(a == 2)    // Dieser Ausdruck ergibt true.\n(10 == 10)  // Auch das ergibt true.\n(a == 5)    // Das ergibt false, weil der Wert in a (2) nicht gleich 5 ist.\n</code></pre>","text":""},{"location":"fundamentals/T05-operators/#operator-nicht-gleich","title":"<code>!=</code> Operator (NICHT GLEICH)","text":"<p>Der <code>!=</code> Operator pr\u00fcft ob die Ausdr\u00fccke auf beiden Seiten nicht gleich sind. Er gibt <code>false</code> zur\u00fcck wenn sie gleich sind und <code>true</code> wenn sie nicht gleich sind. <pre><code>int a = 2\n(a != 2)    // Dieser Ausdruck ergibt false.\n(10 != 10)  // Auch false.\n(a != 5)    // Das ergibt true, weil der Wert in a (2) nicht gleich 5 ist.\n</code></pre></p>"},{"location":"fundamentals/T06-donutclicker/","title":"Krapfenklicker - Das Spiel","text":"<p>Lernziele</p> <p>In diesem Kapitel erstellst du dein erstes Spiel - Krapfenklicker. Du lernst, wie du Variablen, Operatoren und Funktionen f\u00fcr das Programmieren der Spiellogik einsetzen kannst.</p> <p>Das Spielprinzip von Krapfenklicker ist: SpielerInnen dr\u00fccken so schnell sie k\u00f6nnen auf einen Knopf (Button) und erhalten daf\u00fcr Punkte. </p>"},{"location":"fundamentals/T06-donutclicker/#szenenaufbau","title":"Szenenaufbau","text":"<p>Unity bietet Spielobjekte (GameObjects) f\u00fcr BenutzerInnen-Schnittstellen (User Interfaces), etwa Text, Benutzereingabe oder Buttons. Um ein User Interface Spielobjekt einzuf\u00fcgen, machst du einen Rechtsklick auf das Hierarchie Panel. Im Kontextmen\u00fc w\u00e4hlst du UI. Dort findest du die User Interface GameObjects.</p> <p>F\u00fcr Krapfenklicker brauchen wir einen \"Button\". W\u00e4hle also \"UI\"&gt;\"Button\" aus dem Kontextmen\u00fc. Nenne den Button \"ClickButton\".</p> <p></p> <p>Platziere den Button in der Mitte der Szene. </p> <p></p> <p>Weiters brauchst du noch einen Text f\u00fcr die Punkteanzeige. W\u00e4hle hierf\u00fcr im Hierarchie Panel Kontextmen\u00fc \"UI\"&gt;\"Text\". Platziere den Text am linken oberen Rand der Szene.</p> <p>Du kannst das Button Bild austauschen, indem du in der \"Image\"-Komponente des ClickButtons das \"Source Image\" \u00e4nderst. </p> <p></p> <p>Lade etwa das Bild krapfen.png auf deinen Computer und speichere es im \"Sprites\"-Ordner (Diesen Ordner kannst du im \"Assets\"-Ordner anlegen). Ziehe anschlie\u00dfend das \"krapfen\"-Sprite per Drag and Drop auf das \"Source Image\" deines Buttons. Ver\u00e4ndere die Gr\u00f6\u00dfe des Buttons, sodass dieser etwa zwei Drittel der Szene gro\u00df ist.</p> <p></p>"},{"location":"fundamentals/T06-donutclicker/#spiellogik","title":"Spiellogik","text":"<p>F\u00fcr die Spiellogik kannst du in Krapfenklicker ein leeres GameObject einf\u00fcgen. Daf\u00fcr machst du wieder einen Rechtsklick auf das Hierarchie Panel und w\u00e4hlst \"Create Empty\". Nenne das GameObject \"GameController\". F\u00fcge dem GameController GameObject ein Skript hinzu. Nenne das Skript ebenfalls \"GameController\". </p> <p>\u00dcberschreibe den Quellcode in der Datei \"GameController.cs\" mit:</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class GameController : MonoBehaviour {\n\n    public Text meinHighscore; //DIES IST DIE VARIABLE, DURCH DIE DAS TEXTFELD VERWENDET WERDEN KANN\n    public Button clickButton; //DIES IST DIE VARIABLE, DURCH DIE DER BUTTON IM SKRIPT VERWENDET WERDEN KANN\n\n    //HIER DIE VARIABLE F\u00dcR DEN PUNKTESTAND\n    private int //ERG\u00c4NZE HIER\n\n    //DIESE FUNKTION WIRD AUSGEF\u00dcHRT, WENN DER BUTTON GEKLICKT WIRD. \n    public void buttonclick()\n    {\n        highscore = //ERG\u00c4NZE HIER\n        meinHighscore.text = \"Highscore: \" + //ERG\u00c4NZE HIER: ACHTUNG DATENTYP-UMWANDLUNG NOTWENDIG\n\n    }\n}\n</code></pre> <p>Arbeitsauftrag</p> <p>Erg\u00e4nze die fehlenden Code-Teile, bevor du unten weitermachst.</p>"},{"location":"fundamentals/T06-donutclicker/#gameobjects-in-unity-den-variablen-vom-skript-zuweisen","title":"GameObjects in Unity den Variablen vom Skript zuweisen","text":"<p>Die Punkte sollen in der Punkteanzeige angezeigt werden. Klicke im Hierarchy Panel auf das GameObject \"GameController\", im Inspector siehst du nun das schon beigef\u00fcgte Skript. Damit du im \"GameController\"-Skript auf dein Textfeld zugreifen kannst, musst du das Textfeld per Drag and Drop an die \"meinHighscore\"-Variable anheften. Damit das Skript mit dem richtigen Button verkn\u00fcpft ist, ziehe auch den ClickButton in das entsprechende Feld!</p> <p></p> <p>ACHTUNG</p> <p>Damit die <code>buttonclick()</code> Funktion ausgef\u00fchrt wird, muss diese dem GameObject \"ClickButton\" zugewiesen werden.</p> <p>Wie kannst du <code>buttonclick()</code> deinem Button zuweisen? W\u00e4hle im Hierarchie Panel den Button (namens \"ClickButton\") aus. Im Inspektor findest du eine GameObject Komponente \"Button (Script)\". Dort ist eine Liste, in der du Funktionen angeben kannst, die ausgef\u00fchrt werden sollen, wenn der Button gedr\u00fcckt wird. </p> <p></p> <p>Das funktioniert so: Dr\u00fccke auf \"+\". W\u00e4hle im ersten Men\u00fc \"Runtime Only\". Ziehe das GameObject \"GameController\" aus dem Hierarchie Panel unter \"Runtime Only\". W\u00e4hle zuletzt die Funktion \"buttonclick\" aus dem \"GameController\"-Men\u00fc im Men\u00fc neben \"Runtime Only\".</p> <p></p> <p>Fertig!!!! Und jetzt Punkte sammeln :)</p>"},{"location":"fundamentals/T07-transform/","title":"Unity Transform Spielobjektkomponente","text":"<p>Lernziele</p> <p>Hier lernst du die wichtigste Spielobjekt-Komponente in Unity kennen: Transform.</p> <p>Jedes Spielobjekt (GameObject) in Unity hat die Komponente Transform (oder RectTransform bei User Interface GameObjects).</p>"},{"location":"fundamentals/T07-transform/#eigenschaften-von-transform","title":"Eigenschaften von Transform","text":"<p>Mit Transform k\u00f6nnen</p> <ul> <li>die Position eines Spielobjekts,</li> <li>Drehungen und</li> <li>die Gr\u00f6\u00dfe, oder Skalierung,</li> </ul> <p>eines Spielobjekts definiert werden.</p> <p>Alle 3 Eigenschaften haben einen x-, y-, und z-Wert.</p> <p>In 2D-Spielen sind vor allem x-, und y-Werte wichtig.</p> <ul> <li> <p>Bei Position stehen diese Werte jeweils f\u00fcr eine Koordinate im Koordinatensystem der Szene.</p> </li> <li> <p>Bei Rotation stehen die Werte f\u00fcr die Drehung des Spielobjekts um die X-Achse, die Y-Achse und die Z-Achse. Die Werte werden hierbei als Winkel in Grad angegeben. In 2D-Spielen kann vor allem eine Drehung um die Z-Achse effektiv eingesetzt werden.</p> </li> <li> <p>Bei Scale geht es um die relative Gr\u00f6\u00dfe eines Spielobjekts. Standardm\u00e4\u00dfig ist hier der Wert 1 gesetzt. Werte sind hier als Ver\u00e4nderungs-Faktoren zum Standardwert zu verstehen.</p> </li> </ul> <p>Klarerweise k\u00f6nnen die Werte der Eigenschaften der Transform-Komponente in einem C#-Skript ver\u00e4ndert werden.</p>"},{"location":"fundamentals/T07-transform/#krapfenklicker-erweiterung","title":"Krapfenklicker Erweiterung","text":"<p>Die Mehlspeise soll gr\u00f6\u00dfer werden, wenn man darauf klickt!</p> <p>Wie kann man das programmieren?</p> <p></p> <p>Im GameController Spielobjekt des Krapfenklicker Spiels hast du bereits eine Variable angelegt, in der das Krapfen Spielobjekt gespeichert ist: <code>public Button clickButton;</code>.</p> <p>ACHTUNG</p> <p><code>public</code> bedeutet, dass diese Variable f\u00fcr andere Teile des eigenen Spiels (und damit in Unity) aufscheint und beschreibbar ist. Deshalb kannst du dem Skript in Unity ein Spielobjekt zuweisen. Siehe hierf\u00fcr GameObjects in Unity den Variablen vom Skript zuweisen!</p>"},{"location":"fundamentals/T07-transform/#getcomponent-rechtecke-und-vektoren","title":"GetComponent(), Rechtecke und Vektoren","text":"<p>Ok, wie kann man aber jetzt die Gr\u00f6\u00dfe der Mehlspeise ver\u00e4ndern?</p> <p>Daf\u00fcr ben\u00f6tigst du zuerst die aktuelle Gr\u00f6\u00dfe der Mehlspeise. Diese bekommst du aus der Komponente Transform. Die Komponente Transform (oder bei einem Button RectTransform) bekommst du mit: <pre><code>clickButton.GetComponent&lt;RectTransform&gt;()\n</code></pre></p> <p>\u00dcbung</p> <ul> <li>Erkundige dich in der Unity Scripting Referenz, wozu die Funktion <code>GetComponent</code> dient. (Die Suchfunktion liefert hier einen gangbaren Weg)</li> <li>Was bedeuten die Klammern <code>&lt;</code> und <code>&gt;</code> in C#?</li> </ul> <p>\"Rect\" steht f\u00fcr Rectangle, und das hei\u00dft: Rechteck.</p> <p>Bedienfl\u00e4chen wie Buttons werden in Unity in einem Rechteck in der Szene platziert.</p> <p>Ein Rechteck (rect) hat in Unity folgende Eigenschaften: einen Startpunkt (als x- und y-Koordinate) und eine Gr\u00f6\u00dfe (size), die als 2-dimensionaler Vektor angegeben wird - also auch mit einem x- und einem y-Wert f\u00fcr die L\u00e4nge auf der X-Achse und auf der Y-Achse.</p> <p>Tipp</p> <p>Vektoren sind Bewegungen in einem Koordinatensystem. Sie haben eine L\u00e4nge, eine Richtung und eine Orientierung.</p> <p>Da Vektoren in Unity f\u00fcr Gr\u00f6\u00dfen\u00e4nderungen, Positions\u00e4nderungen, Geschwindigkeit und anderes verwendet werden, gibt es eigene Referenz-Datentypen (oder Klassen) daf\u00fcr:</p> <ul> <li><code>Vector2</code> (f\u00fcr 2D Vektoren) bzw.</li> <li><code>Vector3</code> (f\u00fcr 3D Vektoren).</li> </ul> <p>Um die aktuelle Gr\u00f6\u00dfe der Mehlspeise zu speichern, schreibst du daher:</p> <pre><code>Vector2 meineGroesse = clickButton.GetComponent&lt;RectTransform&gt;().rect.size;\n</code></pre>"},{"location":"fundamentals/T07-transform/#vektoren-neu-erstellen","title":"Vektoren neu erstellen","text":"<p>Um die Mehlspeise bei jedem Button-Klick zu vergr\u00f6\u00dfern, brauchst du als n\u00e4chstes einen Wachstumsfaktor. Dieser gibt an, um wieviel die Mehlspeise je in die X-, und Y-Richtung wachsen soll.</p> <p>Der Wachstumsfaktor wird in einen neuen 2D-Vektor gespeichert:</p> <pre><code>Vector2 wachstumsFaktor = new Vector2 (10.0f, 10.0f); //In der runden Klammer werden dem neuen Vektor x-, und y-Werte des 2D Vektors als Paramter im Datentyp Float \u00fcbergeben.\n</code></pre>"},{"location":"fundamentals/T07-transform/#vektoren-und-spielobjekt-eigenschaften","title":"Vektoren und Spielobjekt-Eigenschaften","text":"<p>Schlie\u00dflich wird der Wachstumsfaktor zur aktuellen Mehlspeisgr\u00f6\u00dfe addiert. Du kannst den Gr\u00f6\u00dfenunterschied in der Eigenschaft  <code>sizeDelta</code> des \"ClickButton\"s speichern:</p> <pre><code>clickButton.GetComponent&lt;RectTransform&gt; ().sizeDelta = meineGroesse+wachstumsFaktor;\n</code></pre> <p>Arbeitsauftrag</p> <p>Erg\u00e4nze die Funktion <code>public void buttonclick()</code> im Skript \"GameController.cs\" im Krapfenklicker Spiel, sodass die Mehlspeise bei jedem Buttonklick ein wenig gr\u00f6\u00dfer wird.</p> <p>Tipp</p> <p>Wenn man ein Programm \u00fcberarbeitet, wird dies h\u00e4ufig Refactoring genannt. Refactoring bedeutet die Verbesserung von Quellcode.</p>"},{"location":"fundamentals/T08-conditionals/","title":"Verzweigungen","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du Verzweigungen kennen. If (Wenn) Abfragen erlauben, den Programmfluss zu steuern. Du lernst, wie diese Kontrollstruktur erzeugt werden kann, und wie Bedingungen formuliert werden.</p> <p></p>"},{"location":"fundamentals/T08-conditionals/#wenn-if-sonst-else","title":"Wenn (if) - Sonst (else)","text":"<pre><code>if(Bedingung) //kann wahr oder falsch sein\n{\n    //Hier schreibst du, was passieren soll, wenn die Bedingung wahr ist\n}\nelse\n{\n    //Hier schreibst du, was passieren soll, wenn die Bedingung falsch ist\n}\n</code></pre>"},{"location":"fundamentals/T08-conditionals/#ein-beispiel","title":"Ein Beispiel","text":"<pre><code>String passwort = \"meinPasswort\";\n\nif(passwort == \"PASS\")\n{\n    Debug.Log(\"Access granted.\");\n}\nelse\n{\n    Debug.Log(\"Access denied.\");\n}\n</code></pre> <p>Arbeitsauftrag</p> <p>Erg\u00e4nze die Funktion <code>OnDisable()</code> im Projekt \"HalloElli\" in \"HalloElli.cs\" mit oben angef\u00fchrtem Beispiel. Ver\u00e4ndere den Programmcode, sodass in der Konsole beim Ausf\u00fchren der Funktion \"Access granted.\" steht.</p>"},{"location":"fundamentals/T08-conditionals/#vergleichsoperatoren","title":"Vergleichsoperatoren","text":"<p>Um als Bedingung zwei Ausdr\u00fccke miteinander zu vergleichen, k\u00f6nnen Vergleichsoperatoren verwendet werden. In C# kannst du folgende Vergleichsoperatoren verwenden:</p> Vergleichsoperator Bedeutung <code>==</code> ist gleich <code>!=</code> ist ungleich <code>&gt;</code> ist gr\u00f6\u00dfer als <code>&gt;</code> ist kleiner als <code>&gt;=</code> ist gr\u00f6\u00dfer gleich <code>&lt;=</code> ist kleiner gleich <p>ACHTUNG</p> <p>Ein Vergleich gibt als Ergebnis einen Wahrheitswert (wahr/falsch) - einen Boolean - zur\u00fcck.</p>"},{"location":"fundamentals/T08-conditionals/#logische-operatoren","title":"Logische Operatoren","text":"<p>Logische Operatoren erm\u00f6glichen komplexere Bedingungen, indem Verkn\u00fcpfungen von Wahrheitswerten erstellt werden k\u00f6nnen. H\u00e4ufig verwendete logische Operatoren sind:</p> Logische Operatoren Bedeutung <code>!</code> nicht <code>&amp;&amp;</code> und <code>||</code> oder"},{"location":"fundamentals/T08-conditionals/#verknupfungen-von-bedingungen-beispiel","title":"Verkn\u00fcpfungen von Bedingungen - Beispiel","text":"<pre><code>int elefantenAnzahl;//die Variable \"elefantenAnzahl\" wird deklariert\nelefantenAnzahl = 8;//die Variable \"elefantenAnzahl\" wird mit dem Integer-Wert 8 initialisiert.\n\nvoid OnDisable() //Funkionsdefinition\n{\n    if(elefantenAnzahl &gt; -1 &amp;&amp; elefantenAnzahl &lt; 5)\n    {\n        if(elefantenAnzahl == 0)\n        {\n            Debug.Log(\"Keine Elefanten hier.\");\n        }\n        else if (elefantenAnzahl == 1) //Ein oder mehrere Else If k\u00f6nnen eine If-Abfrage erg\u00e4nzen.\n        {\n            Debug.Log(\"Ein Elefant im Spiel.\");\n        }\n        else\n        {\n            Debug.Log(\"Juhu! Endlich mehrere Elefanten!\");\n        }\n    }\n    else\n    {\n        Debug.Log(\"Bisher k\u00f6nnen nur 0 bis 4 Elefanten im Spiel sein.\");\n    }\n}\n</code></pre> <p>\u00dcbung</p> <p>Was ist der Unterschied zwischen mehreren if-Abfragen hintereinander und mehreren else if-Abfragen hintereinander nach einem if?</p>"},{"location":"fundamentals/T08-conditionals/#verschachtelte-bedingungen-beispiel","title":"Verschachtelte Bedingungen - Beispiel","text":"<pre><code>bool ersterWahrheitswert = true;\nbool zweiterWahrheitswert = false;\nint spielerInnen = 4;\n\n//In der nachfolgenden Verzweigung ist der \"ersterWahrheitswert\" die erste Bedingung der ODER-Verkn\u00fcpfung, die Klammer der zweite.\n//Nur wenn sowohl \"zweiterWahrheitswert\" wahr ist und \"spielerInnen\" gr\u00f6\u00dfer 1 ist, ist die zweite Bedingung wahr.\n//ODER bedeutet, dass eine der beiden Bedingungen wahr sein muss, damit die Verkn\u00fcpfung wahr ist.\nif(ersterWahrheitswert || (zweiterWahrheitswert &amp;&amp; spielerInnen &gt; 1))\n{\n    Debug.Log(\"Stimmt!\");\n}\n</code></pre> <p>Arbeitsauftrag</p> <p>Erg\u00e4nze die Funktion <code>OnDisable()</code> im Projekt \"HalloElli\" in \"HalloElli.cs\" mit oben angef\u00fchrtem Beispiel. Ver\u00e4ndere den Programmcode.</p> <p>Arbeitsauftrag</p> <p>De-Bugge folgenden Quellcode, sodass auf der Konsole 42 ausgegeben wird.</p> <pre><code>bool sollFortsetzen = true;\n\nvoid OnDisable()\n{\n    int wert = 46;\n    bool sollFortsetzen = false;\n    if (sollFortsetzen)\n    {\n        int neuerWert = 6;\n    }\n    Debug.Log((wert + neuerWert) + \" = 42.\");\n}\n</code></pre> <p>ACHTUNG</p> <p>Beachte den G\u00fcltigkeits-Bereich der Varialben! Siehe dazu auch Variablen-Bereich (Scope).</p>"},{"location":"fundamentals/T08-conditionals/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li>IF-Statements Video-Tutorial in Unity (englisch)</li> </ul>"},{"location":"fundamentals/T09-adventure/","title":"Ellis' gro\u00dfes Abenteuer","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du mit Hilfe von Variablen und Verzweigungen ein Text-basiertes Adventure Spiel zu programmieren.</p> <p>In diesem Spiel k\u00f6nnen Befehle in ein Textfeld geschrieben werden. Diese werden durch Bedingungen, wie etwa Vergleiche von Variablen, ausgewertet. Wenn eine Bedingung zutrifft, dann ver\u00e4ndern sich Spielzust\u00e4nde.</p>"},{"location":"fundamentals/T09-adventure/#ellis-groes-abenteuer-ein-text-basiertes-adventurespiel","title":"Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel","text":""},{"location":"fundamentals/T09-adventure/#die-geschichte","title":"Die Geschichte","text":"<p>Eine Maschine zerst\u00f6rt den Wald, in dem Elli lebt. Die Elefantin macht sich auf, um Ihren Wald zu retten. Daf\u00fcr muss sie zuerst einen gro\u00dfen Fluss \u00fcberqueren.</p>"},{"location":"fundamentals/T09-adventure/#szenenaufbau","title":"Szenenaufbau","text":"<p>Erstelle ein neues 2D Unity-Projekt. Nenne es \"Elli's gro\u00dfes Abenteuer\".</p> <p>F\u00fcr das Adventure Spiel werden folgende Spielobjekte (GameObjects) f\u00fcr BenutzerInnen-Schnittstellen (User Interfaces) ben\u00f6tigt:</p> <ul> <li>\"Image\"</li> <li>\"Button\"</li> <li>\"InputField\"</li> <li>\"Text\": Nenne dieses Spielobjekt \"SpielText\"</li> </ul> <p>Hierbei ist die Anordnung der User Interface Elemente wichtig. Das Bild (\"Image\") sollte im Hintergrund sein. Die Steuerelemente (\"InputField\", \"Button\", \"Spieltext\") sollten im Vordergrund sein.</p> <p>Das Spielfeld kann wie folgt angeordnet werden: </p> <p>Dar\u00fcber hinaus musst du mit Rechtsklick in das Hierarchie-Panel \u00fcber \"Create Empty\" ein neues Spielobjekt erzeugen. Nenne es \"GameController\".</p> <p>Arbeitsauftrag</p> <p>\u00c4ndere den Button-Text auf \"Ausf\u00fchren\".</p> <p></p> <p>Arbeitsauftrag</p> <p>\u00c4ndere den Platzhalter-Text des Eingabefelds (\"InputField\") auf \"Text eingeben...\".</p> <p></p> <p>Arbeitsauftrag</p> <p>\u00c4ndere den Text in \"SpielText\" auf \"Du bist auf einem Feld. Vor dir ist ein Fluss. Vielleicht solltest du dich mal umschauen. Also: Schau\".</p> <p></p> <p>Das \"Image\"-Spielobjekt ist eine Art Bilderrahmen. Du kannst im Inspektor ein Bild \u00fcber \"Image (Script)\" &gt; \"Source Image\" per Drag and Drop zuweisen.</p> <p></p> <p>F\u00fcr das erste R\u00e4tsel in diesem Adventure-Spiel (Wie kommt Elli \u00fcber den Fluss?) brauchst du 3 Bilder:</p> <ol> <li>Das Startbild, auf dem Elli, ein Fluss und ein gro\u00dfer Stein erkennbar sind.</li> <li>Ein Bild, auf dem der Stein nicht sichtbar ist (weil Elli diesen tr\u00e4gt).</li> <li>Ein Bild, auf dem der Stein im Wasser und Elli auf der anderen Seite des Flusses zu sehen ist.</li> </ol> <p>Lade die drei Bilder auf deinen Computer herunter: Elli's Abenteuer Start-Bilder</p> <p>Lade die Bilder als \"Assets\" in dein Unity-Projekt. (Falls du das noch nicht gemacht hast, erstelle zuvor im Assets-Ordner 4 Unterordner: \"Sprites\", \"Scripts\", \"Vorlagen\" und \"Material\". Die 3 Grafiken k\u00f6nnen im \"Sprites\"-Ordner abgelegt werden.)</p> <p>Arbeitsauftrag</p> <p>Weise dem \"Image\"-Spielobjekt die Grafik \"ellistart.png\" zu.</p> <p></p>"},{"location":"fundamentals/T09-adventure/#spiellogik","title":"Spiellogik","text":"<p>F\u00fcge dem \"GameController\" Spielobjekt ein Skript hinzu. Nenne das Skript ebenfalls \"GameController\".</p> <p>\u00dcberschreibe den Quellcode in der Datei \"GameController.cs\" mit: <pre><code>using UnityEngine;\nusing UnityEngine.UI;\npublic class GameController : MonoBehaviour\n{\n    public InputField Eingabefeld;\n    public Text TextBox;\n    public Image bilderrahmen;\n    public Sprite startSpielzustand;\n    public Sprite spielzustand2;\n    public Sprite spielzustand3;\n\n    haeltSteinMitRuessel = //Erg\u00e4nze hier den *Datentyp* und den *Wert*!\n\n    public void ausfuehren()\n    {\n        if (Eingabefeld.text == \"Hebe Stein\")\n        {\n            TextBox.text = \"Du hast den Stein aufgehoben. Sieht aus, als k\u00f6nnte man diesen in den Fluss werfen.\";\n            bilderrahmen.sprite = spielzustand??; //Erg\u00e4nze die passende Grafik!\n            //\u00c4ndere den Wert der Variable \"haeltSteinMitRuessel\"!\n        }\n\n        if ( == \"\u00dcberquere Fluss\")  //Erg\u00e4nze hier!\n        {\n            if () { //Erg\u00e4nze die Bedingung, die erf\u00fcllt sein muss!\n                TextBox.text = \"Du hast den Stein ins Wasser geworfen. Du hast den Fluss \u00fcberquert.\";\n                bilderrahmen.sprite = spielzustand??; //Erg\u00e4nze die passende Grafik!\n            }\n            // Erg\u00e4nze hier das \"Sonst\" der if-Abfrage!\n            {\n                 = \"Oh nein, der Fluss ist zu rei\u00dfend. Du musst etwas in den Fluss werfen. Gibt es hier etwas, das man aufheben kann?\";\n                 //Erg\u00e4nze hier!\n            }\n        }\n\n        if (Eingabefeld.text == \"Schau\")\n        {\n            TextBox.text = \"Vor dir ist ein rei\u00dfender Fluss, den du \u00fcberqueren musst. Da liegt auch ein Stein, vielleicht kann man den heben?\";\n        }\n    }\n}\n</code></pre></p> <p>Damit du das Skript im Spiel verwenden kannst, musst du zwei Arbeitsschritte machen:</p> <ol> <li> <p>Verkn\u00fcpfe den Aufruf der Funktion \"ausfuehren\" mit \"On Click\" des Buttons \"Ausf\u00fchren\". (Eine Erkl\u00e4rung, wie das geht, findest du beim Krapfenklicker Spiel!)</p> </li> <li> <p>Verkn\u00fcpfe die public Variablen im Skript mit GameObjects und Grafiken in Unity. W\u00e4hle dazu den GameController im Hierarchy Panel aus und ziehe die entsprechenden GameObjects auf die Felder im Inspector!</p> </li> </ol> <p></p> <p>Arbeitsauftrag</p> <p>Vervollst\u00e4ndige das GameController-Skript und teste dein Spiel!</p>"},{"location":"fundamentals/T09-adventure/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li>Textadventures Wikipedia-Eintrag (englisch)</li> <li>Grumpy Gamer Weblog (englisch) (Der Blog von Ron Gilbert)</li> </ul>"},{"location":"fundamentals/T10-drawingingimp/","title":"Grafiken gestalten in GIMP","text":"<p>Lernziele</p> <p>In diesem Kapitel wird das Grafikbearbeitungsprogramm GIMP (GNU Image Manipulation Program) vorgestellt. Du lernst, wie du einfache Grafiken - insbesondere Spielfiguren - mit GIMP erstellen kannst. Du lernst die Verwendung von Ebenen.</p>"},{"location":"fundamentals/T10-drawingingimp/#gimp-uberblick","title":"Gimp - \u00dcberblick","text":"<p>Die GIMP-BenutzerInnen-Oberfl\u00e4che umfasst folgende Elemente:</p> <ol> <li>Werkzeugleiste</li> <li>Werkzeugeinstellungen</li> <li>Bildfenster</li> <li>Ebenenfenster</li> <li>Farbverl\u00e4ufe</li> </ol> <p>Hier wird ein \u00dcberblick \u00fcber die BenutzerInnen-Oberfl\u00e4che von GIMP gegeben: GIMP Benutzeroberfl\u00e4che</p>"},{"location":"fundamentals/T10-drawingingimp/#ebenen","title":"Ebenen","text":"<p>Um Grafiken in einem Bild zu kombinieren, k\u00f6nnen in GIMP Ebenen verwendet werden. Hier findest du eine Erkl\u00e4rung zur Verwendung von Ebenen in GIMP: GIMP Ebenen</p>"},{"location":"fundamentals/T10-drawingingimp/#erstellen-einer-spielfigur","title":"Erstellen einer Spielfigur","text":"<p>Zum Ausprobieren kannst du dir die GIMP-Datei \"Elefant\" hier herunterladen: Elefant GIMP-Datei</p> <p>Die Erstellung dieser Spielfigur-Grafik wird in einem Video-Tutorial erkl\u00e4rt.</p> <ul> <li>Spielfigur erstellen: Teil 1</li> <li>Spielfigur erstellen: Teil 2</li> <li>Spielfigur erstellen: Teil 3</li> <li>Spielfigur erstellen: Teil 4</li> </ul>"},{"location":"fundamentals/T10-drawingingimp/#ellis-abenteuer-erganzung","title":"Ellis' Abenteuer - Erg\u00e4nzung","text":"<p>Arbeitsauftrag</p> <p>Erweitere das Spiel \"Elli's gro\u00dfes Abenteuer\" um ein R\u00e4tsel. Erstelle die hierf\u00fcr notwendigen Grafiken in GIMP. Passe das GameController-Skript an.</p> <p>Eine GIMP-Datei, aus der die Startgrafiken f\u00fcr Elli's Abenteuer erzeugt wurden, kannst du hier herunterladen: Elli Adventure GIMP Grafik</p>"},{"location":"fundamentals/T10-drawingingimp/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li>GIMP BenutzerInnen-Handbuch</li> <li>GIMP Tutorials</li> </ul>"},{"location":"fundamentals/T11-functions/","title":"Funktionen","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du was Funktionen beim Programmieren sind. Du lernst, wof\u00fcr Funktionen verwendet werden, was Parameter und R\u00fcckgabewerte sind und wie du deine eigenen Funktionen schreiben kannst.</p>"},{"location":"fundamentals/T11-functions/#wofur-braucht-man-funktionen","title":"Wof\u00fcr braucht man Funktionen?","text":"<p>Funktionen sind kleine Unterprogramme.</p> <p>Vielleicht musst du f\u00fcr dein Spiel den Abstand zwischen zwei Objekten berechnen? Diese Berechnung ben\u00f6tigt man in den meisten Spielen sehr h\u00e4ufig.</p> <p>Eine M\u00f6glichkeit ist: den daf\u00fcr n\u00f6tigen Code jedes Mal eintippen, oder: mit Kopieren und Einf\u00fcgen \u00fcberall einzuf\u00fcgen, wo du ihn ben\u00f6tigst. Beides ist aber nicht nur sehr viel Arbeit, sondern auch sehr schwer zu warten. Wenn du zum Beispiel sp\u00e4ter merkst, dass deine Berechnung einen Fehler enth\u00e4lt, musst du an allen Stellen im Programm den Fehler ausbessern.</p> <p>Eine bessere M\u00f6glichkeit ist:</p> <p>Du erstellst eine Funktion, die den Abstand zwischen zwei Punkten berechnet. Die Erstellung einer Funktion nennt man Definition.</p> <pre><code>   //Diese Funktion berechnet den Abstand zwischen zwei Objekten\n   public float Abstand(GameObject object1, GameObject object2)\n    {\n        float abstand = Vector3.Distance(object1.transform.position, object2.transform.position);\n\n        return abstand;\n    }\n</code></pre> <p>Anstatt nun jedes Mal diese Berechnung h\u00e4ndisch durchzuf\u00fchren, kannst du diese Funktion verwenden. Das Ausf\u00fchren einer Funktion bezeichnet man als Aufruf.</p> <pre><code>  float entfernung = Abstand(elli, ossi);\n</code></pre> <p>Au\u00dferdem musst du \u00c4nderungen nur an einer Stelle, n\u00e4mlich im Code der Funktion, durchf\u00fchren.</p>"},{"location":"fundamentals/T11-functions/#aufbau-einer-funktion","title":"Aufbau einer Funktion","text":"<p>Der Zugriffsmodifikator legt fest, von welchen Klassen man auf die Funktion zugreifen kann.</p> <p>Eine Funktion kann beliebig viele Parameter haben. Parameter legen genauer fest, was die Funktion tun soll. In unserem Beispiel wird \u00fcber die Parameter festgelegt, von welchen zwei Spielobjekten der Abstand berechnet werden soll. Die Parameter stehen im Body der Funktion als Variablen zur Verf\u00fcgung.</p>"},{"location":"fundamentals/T11-functions/#funktionen-mit-ruckgabewert","title":"Funktionen mit R\u00fcckgabewert","text":"<p>Das Schl\u00fcsselwort <code>return</code> beendet die Ausf\u00fchrung einer Funktion und gibt den danachstehenden Wert an den Funktionsaufrufer zur\u00fcck.</p> <p>Zum Beispiel kannst du das Ergebnis eines Aufrufs der Funktion <code>Abstand()</code> in einer Variable speichern oder direkt in einem if-Statement verwenden:</p> <pre><code>    if(Abstand(elli, pilz) &lt; 100){\n\n    }\n</code></pre>"},{"location":"fundamentals/T11-functions/#funktionen-ohne-ruckgabewert","title":"Funktionen ohne R\u00fcckgabewert","text":"<p>Nicht immer ben\u00f6tigt man eine Funktion mit R\u00fcckgabewert. F\u00fcr so ein Funktion gibt man als R\u00fcckgabetyp <code>void</code> an, au\u00dferdem ben\u00f6tigt man das Schl\u00fcsselwort <code>return</code> nicht.</p> <p>zwei Beispielel: <pre><code>     //  Diese Funktion erh\u00f6ht den Punktestand und aktualisiert den Text des Punktestands.\n    public void ErhoehePunktestand(int punkte)\n    {\n        punkteStand = punkteStand + punkte;\n        AktualisierePunktestandText();\n    }\n\n    //  Diese Funktion aktualisiert den angezeigten Text des Punktestands.\n    //  Sie muss immer aufgerufen werden, nachdem sich die Punkte ge\u00e4ndert haben.\n    private void AktualisierePunktestandText()\n    {\n        scoreText.text = \"Score: \" + punkteStand;\n    }\n</code></pre></p> <p>ACHTUNG</p> <p>Je nach Programmiersprache gibt es unterschiedliche Definitionen der Begriffe Funktion, Prozedur und Methode. Generell (C,C++, C# und Java) ist eine Funktion der allgemeine Begriff f\u00fcr alle Funktionsarten. Funktionen ohne R\u00fcckgabewert werden als Prozeduren bezeichnet und Funktionen innerhalb von Klassen sind Methoden. Methoden beschreiben Verhalten von Objekten/Klassen z.B. esseFisch() kann eine Methode der Klasse Katze sein.</p>"},{"location":"fundamentals/T11-functions/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li> <p>Variables and Functions Tutorial (englisch)</p> </li> <li> <p>Scope and Access Control in Unity Tutorial  (englisch)</p> </li> </ul>"},{"location":"fundamentals/T12-accessmodifiers/","title":"Zugriffskontrolle durch Zugriffsmodifikatoren (access modifiers)","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du, was Zugriffsmodifikatoren von Variablen und Funktionen (Methoden) sind und wann du welche Art verwenden solltest.</p>"},{"location":"fundamentals/T12-accessmodifiers/#klassenvariablen","title":"Klassenvariablen","text":"<p>Klassenvariablen sind Variablen, die in einer Klasse au\u00dferhalb von Funktionen deklariert werden.  Hier sind <code>minGeschwindigkeit</code> und <code>maxGeschwindigkeit</code> Klassenvariablen. <code>rotationsgeschwindigkeit</code> ist keine Klassenvariable, da sie in der Funktion <code>Start()</code> deklariert wurde. Sie ist eine lokale Variable, die nur innerhalb der Methode verf\u00fcgbar ist.</p>"},{"location":"fundamentals/T12-accessmodifiers/#was-sind-zugriffsmodifikatoren","title":"Was sind Zugriffsmodifikatoren?","text":"<p>Zugriffsmodifikatoren legen fest von wo aus man auf eine Klassenvariable oder eine Funktion zugreifen kann. Die drei wichtigsten Zugriffsmodifikatoren sind:</p> <ul> <li>public - Zugriff von \u00fcberall</li> <li>private - Zugriff nur innerhalb der Klasse</li> <li>protected - Zugriff innerhalb der Klasse und von allen Klassen die von dieser Klasse erben. (Mehr zu Vererbung unter Objektorientierte Programmierung)</li> </ul> <p>Tipp</p> <p>public Variablen k\u00f6nnen in Unity auch im Inspector eingesehen und ver\u00e4ndert werden.</p> <p>Zum Beispiel: <pre><code>public class Player {\n    private int hitpoints = 10;\n\n    public void NimmSchaden(int schaden){\n        hitpoints = hitpoints - schaden;\n    }\n}\n</code></pre></p> <pre><code>public class Enemy {\n    public int damage;\n\n    private void Attack(Player player){\n        player.NimmSchaden(damage);\n    }\n}\n</code></pre> <p><code>hitpoints</code> aus der Klasse <code>Player</code> ist private und kann somit aus der Klasse <code>Enemy</code> nicht direkt ver\u00e4ndert werden. Die Methode <code>NimmSchaden()</code> ist aber public. Somit kann man aus der Klasse <code>Enemy</code> mithilfe dieser Methode die Hitpoints eines Player Objekts ver\u00e4ndern.</p> <p><code>damage</code> in <code>Enemy</code> ist public. Das hei\u00dft in Unity scheint diese Variable im Inspector auf und du kannst direkt im Inspector den Schaden eines Gegners einstellen. </p> <p>Au\u00dferdem kann man auch sonst von \u00fcberall auf <code>damage</code> zugreifen. Du k\u00f6nntest z.B. <code>Player</code> folgenderma\u00dfen erweitern: <pre><code>public class Player {\n    private int hitpoints = 10;\n\n    public void NimmSchaden(int schaden){\n        hitpoints = hitpoints - schaden;\n    }\n\n    private void MacheGegnerHarmlos(Enemy enemy){\n        enemy.damage = 0;\n    }\n}\n</code></pre></p> <p>Achtung</p> <p>Wenn man f\u00fcr Klassenvariablen oder Methoden keine Zugriffsmodifikatoren angibt, werden diese implizit auf private gesetzt.</p> <p>Tipp</p> <p>Zugriffsmodifikatoren sollten, immer m\u00f6glichst eingeschr\u00e4nkt verwendet werden. Das hei\u00dft public sollte man nur dann verwenden, wenn man einen guten Grund daf\u00fcr hat.</p> <p>Ein Programm wird n\u00e4mlich sehr schnell sehr un\u00fcbersichtlich, wenn Variablen von vielen verschiedenen Stellen aus bearbeitet werden. Dadurch kommt es leichter zu Bugs. Au\u00dferdem sind diese Bugs dann auch schwerer zu finden.</p>"},{"location":"fundamentals/T12-accessmodifiers/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li>Scope and Access Control in Unity Tutorial  (englisch)</li> </ul>"},{"location":"fundamentals/T13-loops/","title":"Schleifen","text":"<p>Lernziele</p> <p>Hier lernst du, wie du mit Schleifen Programmcode wiederholen kannst.</p> <p>Wo Programmcode wiederholt wird, k\u00f6nnen Schleifen verwendet werden. Spiele werden meist in einer Spielschleife gestartet.</p> <p>Tipp</p> <p>Iteration bedeutet ein Schleifendurchlauf.</p>"},{"location":"fundamentals/T13-loops/#for-schleife","title":"for-Schleife","text":"<p>Ein Beispiel: <pre><code>    for (int i = 0; i &lt; 10; i++)\n    {\n        Debug.Log(\"Ich mag Kiwis.\");\n    }\n</code></pre></p> <p>Arbeitsauftrag</p> <p>\u00d6ffne dein Unity-Startprojekt. \u00d6ffne das Elefanten-Skript. Erg\u00e4nze die Funktion \"OnDisable()\" mit der oben angezeigten for-Schleife und teste das Skript. Was wird auf der Konsole in Unity ausgegeben?</p>"},{"location":"fundamentals/T13-loops/#while-schleife","title":"while-Schleife","text":"<p>while-Schleifen laufen, bis eine Abbruchbedingung wahr ist.</p>"},{"location":"fundamentals/T13-loops/#schlusselworter-break-abbrechen-und-continue-weitermachen","title":"Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen)","text":"<p>Durch das Schl\u00fcsselwort break wird eine Schleife verlassen.</p> <p>Durch das Schl\u00fcsselwort continue wird zum n\u00e4chsten Schleifendurchlauf gesprungen.</p> <p>\u00dcbung</p> <p>Wie oft wird bei nachfolgendem Quellcode auf der Konsole \"Ich mag K\u00e4se!\" ausgegeben?</p> <pre><code>    while (x &lt; 10)\n    {\n        Debug.Log(\"Ich mag K\u00e4se!\");\n        break;\n    }\n</code></pre>"},{"location":"fundamentals/T13-loops/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<ul> <li>Schleifen in C# f\u00fcr die Spieleprogrammierung (englisch)</li> </ul>"},{"location":"fundamentals/T14-gameloop/","title":"Die Spielschleife","text":""},{"location":"fundamentals/T14-gameloop/#was-ist-eine-spielschleife","title":"Was ist eine Spielschleife?","text":"<p>In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus:</p> <p></p>"},{"location":"fundamentals/T14-gameloop/#weshalb-benotigt-man-eine-spielschleife","title":"Weshalb ben\u00f6tigt man eine Spielschleife?","text":"<p>Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\"</p> <p>Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum.</p>"},{"location":"fundamentals/T14-gameloop/#einklinken-in-die-spielschleife-in-unity","title":"Einklinken in die Spielschleife in Unity","text":"<p>Folgende Funktionen eines Spielobjekt-Skripts werden in der Unity-Spielschleife ausgef\u00fchrt:</p> <ol> <li>FixedUpdate()</li> <li>Update()</li> <li>LateUpdate()</li> </ol>"},{"location":"fundamentals/T14-gameloop/#fixedupdate","title":"FixedUpdate()","text":"<p>FixedUpdate() wird  in einem fixen Zeitintervall (Standardm\u00e4\u00dfig 50 Mal pro Sekunde) aufgerufen . FixedUpdate() sollte man immer dann verwenden, wenn man mit Objekten der Physics-Engine interagiert. Also z.B. wenn man die Geschwindigkeit eines RigidBodys ver\u00e4ndert.</p>"},{"location":"fundamentals/T14-gameloop/#update","title":"Update()","text":"<p>Update() wird einmal pro Frame aufgerufen. Das hei\u00dft diese Funktion wird \u00f6fter aufgerufen, wenn die Framerate h\u00f6her ist. Typische Aufgaben, die man in Update() durchf\u00fchrt sind z.B.</p> <ul> <li>das Abfragen des Userinputs</li> <li>Bewegung von Nicht-Physikobjekten</li> <li>Timer</li> </ul> <p>Tipp</p> <p>Wenn man in Update() Bewegungen implementiert, sollte man diese immer mit <code>Time.deltaTime</code> multiplizieren. Sonst bewegt sich das Objekt bei einer h\u00f6heren Framerate schneller als bei einer niedrigen. (Time.deltaTime gibt die vergangene Zeit seit dem letzten Frame an) Fun Fact: In dem Spiel Fallout 76 ist genau dies schlecht implementiert und die Bewegungsgeschwindigkeit an die Framerate gebunden. Um zu verhindern, dass sich Spieler_innen mit einem besonders schnellen PC zu schnell bewegen, wurde das Problem in einem Patch durch Festlegen einer maximalen Framerate von 63 FPS \"gefixt\". Link</p>"},{"location":"fundamentals/T14-gameloop/#lateupdate","title":"LateUpdate()","text":"<p>Ist genau wie Update() mit dem Unterschied, dass es in der Gameloop sp\u00e4ter aufgerufen wird. Diese Funktion wird eher selten verwendet, kann jedoch praktisch sein, wenn man etwas unbedingt nach dem Aufrufen von Update() ausgef\u00fchrt werden soll. Ein typischer Anwendungsfall ist die Bewegung einer Kamera, die einem Objekt folgen soll, dessen Position sich in Update() ver\u00e4ndert.</p>"},{"location":"fundamentals/T14-gameloop/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<p>Eine genaue Beschreibung der Funktionen findest du in der offiziellen Unity Programmier-Referenz.</p> <p>Video zum Unterschied zwischen Update() und FixedUpdate()</p> <p>Genaue Execution-Order der Unity Gameloop</p>"},{"location":"fundamentals/T15-classes/","title":"Objekt-orientiertes Programmieren - Grundlagen","text":"<p>Lernziele</p> <p>In diesem Kapitel werden grundlegende Konzepte der Objekt-orientierten Programmierung, n\u00e4mlich Klasse, Instanz und Konstruktor vorgestellt.</p>"},{"location":"fundamentals/T15-classes/#klasse-und-instanz","title":"Klasse und Instanz","text":"<p>W\u00e4hrend eine Klasse ein Objekt mit Eigenschaften und Funktionen beschreibt, haben Eigenschaften der Instanz eines Objekts Werte. Ist eine Instanz zur Laufzeit eines Programms erzeugt worden, hat diese somit auch je einen bestimmten Zustand.</p> <p>In C# kann eine Klasse folgenderma\u00dfen angegeben werden: <pre><code>    class Elefant : MonoBehavior\n    {\n        ...\n    }\n</code></pre></p>"},{"location":"fundamentals/T15-classes/#der-konstruktor","title":"Der Konstruktor","text":"<p>Zum Erzeugen einer Instanz einer Klasse (also eines Objekts mit Werten aus einer Objektbeschreibung), wird die Konstruktor-Methode verwendet:</p> <pre><code>    Elefant elli = new Elefant();\n</code></pre> <p>Das Schl\u00fcsselwort new gefolgt von der Konstruktor-Methode erzeugt eine neue Instanz einer Klasse. Die Instanz wird in eine Variable gespeichert. Der Datentyp der Variable ist die Klassenbezeichnung.</p> <p>Innerhalb einer Klasse kann eine Konstruktor-Methode folgenderma\u00dfen definiert werden: <pre><code>    class Elefant\n    {\n        public Elefant() //Das ist die Konstruktor-Methode. Sie hat dieselbe Bezeichnung wie die Klasse.\n        {\n            ... //Hier k\u00f6nnen der Instanz Werte bei der Erzeugung zugewiesen werden.\n        }\n    }\n</code></pre></p>"},{"location":"fundamentals/T15-classes/#objektvariablen-und-methoden","title":"Objektvariablen und Methoden","text":"<p>Vereinfacht gesagt beschreibt eine Klasse die Eigenschaften und F\u00e4higkeiten ihrer Objekte. Wobei die Eigenschaften Klassenvariablen und die F\u00e4higkeiten Methoden sind.</p> <p>Beispiel: Hier hat ein Elefant die Eigenschaften farbe und alter. Au\u00dferdem kann man ihn \u00fcber die entsprechende Funktion tr\u00f6ten lassen.</p> <pre><code>public class Elefant {\n    public String farbe;\n    public int alter;\n\n    public void troeten(int anzahl) {\n        while(anzahl &gt; 0) {\n            Console.WriteLine(\"T\u00f6r\u00f6\u00f6\u00f6\u00f6! \"); //In einem Textfenster wird\n                            //\"T\u00f6r\u00f6\u00f6\u00f6\u00f6!\" ausgegeben\n            anzahl--; //der Parameter Anzahl wird reduziert um 1\n        }\n    }\n}\n</code></pre>"},{"location":"fundamentals/T15-classes/#der-punktoperator","title":"Der Punktoperator","text":"<p>Mithilfe eines Punktes kann man dann auf die Variablen, bzw. Methoden des Objektes zugreifen. (Vorausgesetzt die Sichtbarkeitsmodifikatoren passen).</p> <pre><code>    Elefant elli = new Elefant();\n    elli.farbe = grau;\n    elli.alter = 10;\n    elli.troeten();\n</code></pre>"},{"location":"fundamentals/T15-classes/#bouncyfant-intro","title":"BouncyFant - Intro","text":"<p>Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst.</p> <p>Was wirst du im BouncyFant Tutorial lernen? </p> <ul> <li>Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung</li> </ul> <p>und auch</p> <ul> <li>Dateimanagement in Unity</li> <li>Spielobjekt-Animation in Unity</li> <li>Spielobjektkomponente Rigidbody2d </li> <li>Spielobjekte bewegen</li> <li>Springen mit Hilfe von Vektoren</li> <li>Kollisionsabfrage in Unity</li> <li>Spiellogik</li> </ul>"},{"location":"spaceasteroids/T01-spaceasteroids/","title":"Space-Asteroids","text":"<p>Lernziele</p> <p>In diesem Kapitel wirst du mithilfe des Gelernten aus den vorigen Kapiteln die letzten Teile des Spiels Space-Asteroids selber programmieren.</p> <p>In Space-Asteroids fliegst du mit einem Raumschiff durch ein Asteroidenfeld. Du musst die Asteroiden abschie\u00dfen oder ihnen ausweichen. Wenn du von einem getroffen wirst, explodiert das Raumschiff.</p> <p>Arbeitsauftrag</p> <p>Vervollst\u00e4ndige das Unity-Projekt. Lediglich die Programmierung der Asteroiden fehlt noch.</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#projekt-downloaden","title":"Projekt downloaden","text":"<ol> <li> <p>Gehe auf https://github.com/learn2proGrAME/SpaceShooter</p> </li> <li> <p>Klicke zuerst auf \"Clone or Download\" und dann auf \"Download ZIP\"</p> <p></p> </li> <li> <p>Nach dem Download entzippe das heruntergeladene Verzeichnis, \u00f6ffne Unity und klicke auf \"Open\"</p> <p></p> </li> <li> <p>Gehe in das entpackte Verzeichnis und \u00f6ffne das Projekt.</p> <p></p> </li> </ol>"},{"location":"spaceasteroids/T01-spaceasteroids/#teste-das-spiel","title":"Teste das Spiel","text":"<p>Klicke auf den Play-Button in Unity und teste das Spiel</p> <p>Du kannst mit den Pfeiltasten herumfliegen und mit der Leertaste schie\u00dfen. Ansonsten ist das Spiel aber noch recht langweilig.</p> <p>Wenn du w\u00e4hrend das Spiel l\u00e4uft in die Scene-View schaust, siehst du, dass am oberen Spielfeldrand schon Asteroiden erzeugt werden. Allerdings tun diese noch nichts.</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#bewegung-der-asteroiden","title":"Bewegung der Asteroiden","text":""},{"location":"spaceasteroids/T01-spaceasteroids/#die-benotigten-variablen-deklarieren","title":"Die ben\u00f6tigten Variablen deklarieren","text":"<p>Als erstes k\u00fcmmern wir uns darum, dass die Asteroiden in Bewegung gesetzt werden. Sie sollen senkrecht vom oberen Rand des Spielfelds zum unteren Rand fliegen.</p> <p>\u00d6ffne unter Assets/Scripts das Script Asteroid </p> <p>Da wir die eingebaute Physic-Engine von Unity verwenden, ben\u00f6tigen wir f\u00fcr die Bewegung einen Rigidbody.</p> <p>Erstelle als erstes eine private Variable vom Typ Rigidbody in der dieser gespeichert wird.</p> <pre><code>    private Rigidbody rb;\n</code></pre> <p>Lege au\u00dferdem noch eine public Variable f\u00fcr die Geschwindigkeit an mit der der Asteroid fliegen soll.</p> <pre><code>    public float geschwindigkeit;\n</code></pre>"},{"location":"spaceasteroids/T01-spaceasteroids/#bewegung-im-spiel","title":"Bewegung im Spiel","text":"<p>Bevor du den Asteroiden in Bewegung setzen kannst, musst du die Variable des Rigidbodys initialisieren.  </p> <p>Mache dies in der <code>start()</code> Methode mit dem Befehl <code>GetComponent&lt;Rigidbody&gt;()</code></p> <p>Dein Code sollte so aussehen:</p> <pre><code>     //Start() wird von Unity aufgerufen, wenn das Object erzeugt wird.\n    void Start(){\n        //Setze die Referenz auf den Rigidbody\n        rb = GetComponent&lt;Rigidbody&gt; ();\n    }\n</code></pre> <p>Nun m\u00fcssen wir dem Rigidbody nur noch eine Geschwindigkeit geben. Verwende hierf\u00fcr den Befehl <code>rb.velocity = new Vector3 (0, 0, -geschwindigkeit);</code></p> <p>F\u00fcge diesen Befehl ebenfalls in der <code>Start()</code> Methode nach dem Initialisieren von <code>rb</code> ein.</p> <p>Hinweis</p> <p>Vielleicht ist dir aufgefallen, dass wir die Variable geschwindigkeit noch gar nicht initialisiert haben. Das ist kein Problem. Da diese public ist, kann man ihren Wert im Inspector von Unity festlegen.</p> <p>Speichere das Script und gehe wieder in Unity.</p> <p>Im Ordner Assets/Vorlagen findest du die Vorlage f\u00fcr die Asteroiden. Wenn du sie ausw\u00e4hlst siehst du, dass das Script Asteroid.cs bereits angeh\u00e4ngt ist. Wenn du nun noch die geschwindigkeit auf einen Wert gr\u00f6\u00dfer als 0 setzt, bist du mit diesem Teil fertig.</p> <p></p> <p>Vergiss nicht zu testen und probiere ein paar unterschiedliche Werte f\u00fcr die Geschwindigkeit aus!</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#rotation-der-asteroiden","title":"Rotation der Asteroiden","text":"<p>Die Asteroiden bewegen sich nun zwar, allerdings sehen sie noch ein bisschen leblos aus. Lassen wir sie rotieren!</p> <p>Sie sollen mit einer bestimmten Geschwindigkeit um eine zuf\u00e4llige Achse rotieren.</p> <p>Erstelle eine public Variable vom Typ float f\u00fcr die Rotationsgeschwindigkeit und gib ihr einen sinnvollen Namen.</p> <p>Dann f\u00fcge am Ende der Methode <code>start()</code> folgenden Befehl ein:</p> <pre><code>    rb.angularVelocity = Random.insideUnitSphere * rotationsgeschwindigkeit;\n</code></pre> <p>Wobei <code>rotationsGeschwindigkeit</code> der von dir gew\u00e4hlte Variablenname sein muss.</p> <p>Speichere das Skript, gehe in Unity und setze die Rotationsgeschwindigkeit im Inspector so wie in Schritt 3.2.</p> <p>Teste!</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#kollision","title":"Kollision","text":"<p>Die Asteroiden fliegen herum, drehen sich und wenn sie das Raumschiff ber\u00fchren wird dieses zerst\u00f6rt. Allerdings kann man sie noch nicht abschie\u00dfen.</p> <p>In diesem Teil wirst du folgende Dinge programmieren:</p> <p>Wenn ein Asteroid mit einem Lasergescho\u00df kollidiert ...</p> <ol> <li>... werden Lasergescho\u00df  und der Asteroid gel\u00f6scht</li> <li>... wird der Punktestand erh\u00f6ht</li> <li>... wird ein Sound abgespielt</li> </ol> <p>Hinweis</p> <p>Der meiste Code in diesem Teil wird in der Methode <code>OnTriggerEnter(Collider other)</code> eingef\u00fcgt. Diese Methode wird (etwas vereinfacht gesagt) von Unity immer dann aufgerufen, wenn eine Kollision stattfindet. Der Parameter <code>other</code> ist hierbei der Collider des GameObjects mit dem kollidiert wird.</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#was-kollidiert","title":"Was kollidiert?","text":"<p>Bevor wir implementieren, was geschehen soll, m\u00fcssen wir \u00fcberpr\u00fcfen womit der Asteroid \u00fcberhaupt kollidiert.</p> <p>F\u00fcge ein if-Statement in der Methode <code>OnTriggerEnter()</code> ein, das \u00fcberpr\u00fcft ob die Variable <code>other.tag</code> gleich \"Gescho\u00df\" ist. Um zu \u00fcberpr\u00fcfen ob <code>other</code> ein Lasergescho\u00df ist.</p> <p>Hinweis</p> <p>Man kann in Unity jedem Gameobject und jeder Vorlage einen tag zuweisen. Dieser tag ist als String Variable <code>tag</code> in jedem GameObject verf\u00fcgbar. In diesem Spiel wurde z.B. den Lasergescho\u00dfen der tag \"Gescho\u00df\" und den Asteroiden der tag \"Hindernis\" gegeben.</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#gescho-und-asteroid-loschen","title":"Gescho\u00df und Asteroid l\u00f6schen","text":"<p>Um in Unity ein Gameobject zu l\u00f6schen verwendet man die Funktion <code>Destroy(GameObject)</code>. Diese l\u00f6scht das Gameobjekt, das als Parameter angegeben wird am Ende des aktuellen Spielframes.</p> <p>Rufe nun zweimal die Funktion <code>Destroy()</code> auf. Gib einmal <code>other.gameObject</code> und einmal <code>gameObject</code> als Parameter an.</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#punktestand-erhohen","title":"Punktestand erh\u00f6hen","text":"<p>Der GameController stellt die Methode <code>ErhoehePunktestand(int punkte)</code> zur Verf\u00fcgung.</p> <p>Bevor du diese Funktion aufrufen kannst, ben\u00f6tigst du allerdings eine Variable mit einer Referenz auf den GameController.</p> <ol> <li>Erstelle eine private Variable vom Typ GameController am Beginn der Klasse und nenne sie \"gameController\".</li> <li>Initialisiere in der Methode <code>Start()</code> die Variable f\u00fcr den GameController mithilfe der Funktion <code>FindeGameController()</code></li> </ol> <pre><code>    gameController = FindeGameController();\n</code></pre> <p>Rufe nun in der Methode <code>OnTriggerEnter()</code> im Asteroid-Skript die Funktion <code>ErhoehePunktestand(int punkte)</code> des GameControllers auf und gib als Parameter z.B. 10 an.</p> <p>Hinweis</p> <p>Um eine Funktion in einem anderen Objekt aufzurufen, verwende: variablenname-des-objekts.FunktionsName() Also z.B. <code>gameController.ErhoehePunktestand(10);</code></p>"},{"location":"spaceasteroids/T01-spaceasteroids/#sound-abspielen","title":"Sound abspielen","text":"<p>Lege als erstes eine public Variable vom Typ AudioClip am Beginn der Klasse an und speichere das Skript.</p> <p>Gehe in Unity auf Assets/Vorlagen und w\u00e4hle Asteroid aus. Im Inspektor siehst du die Variable f\u00fcr den AudioClip.</p> <p>Klicke auf die Zielscheibe rechts daneben und w\u00e4hle \"Explosion1\" aus.</p> <p></p> <p>Zum Abspielen des Sounds gibt es im GameController die Methode <code>csharp SpieleSound(AudioClip sound, float lautstaerke)</code></p> <p>Rufe diese Methode innerhalb von <code>OnTriggerEnter</code> auf und gib als Parameter die Variable f\u00fcr den Sound und <code>0.2f</code> an.</p>"},{"location":"spaceasteroids/T01-spaceasteroids/#vollstandiger-sourcecode","title":"Vollst\u00e4ndiger SourceCode","text":"<p>Dein fertiger Sourcecode sollte in etwa so aussehen:</p> <pre><code>    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n\n    public class Asteroid : MonoBehaviour {\n\n        //Referenz auf den Rigidbody\n        private Rigidbody rb;\n\n        //Die Geschwindigkeit mit der die Asteroiden fliegen\n        public float geschwindigkeit;\n\n        //Rotationsgeschwindigkeit\n        public float rotationsGeschwindigkeit;\n\n        //Referenz auf den GameController\n        private GameController gameController;\n\n        //Der Sound der bei der Zerst\u00f6rung eines Asteroiden abgespielt wird.\n        public AudioClip explosionsSound;\n\n\n        //Start() wird von Unity aufgerufen, wenn das Object erzeugt wird.\n        void Start(){\n\n            //Setze die Referenz auf den Rigidbody\n            rb = GetComponent&lt;Rigidbody&gt; ();\n\n            //Setze die Geschwindigkeit\n            rb.velocity = new Vector3 (0, 0, -geschwindigkeit);\n\n            //Setze die Rotationsgeschwindigkeit\n            rb.angularVelocity = Random.insideUnitSphere * rotationsGeschwindigkeit;\n\n            //Setze GameController-Referenz\n            gameController = FindeGameController();\n        }\n\n        //OnTriggerEnter() wird von Unity aufgerufen, wenn ein anderer Collider mit dem eigenen Collider kollidiert.\n        void OnTriggerEnter(Collider other)\n        {\n            //\u00dcberpr\u00fcfe ob das andere Objekt ein Gescho\u00df ist.\n            if (other.tag == \"Gescho\u00df\")\n            {\n                //L\u00f6sche das Gescho\u00df\n                Destroy(other.gameObject);\n\n                //L\u00f6sche den Asteroiden selbst\n                Destroy(gameObject);\n\n                //erh\u00f6he den Punktestand\n                gameController.ErhoehePunktestand(10);\n\n                //Spiele den explosionsSound ab\n                gameController.SpieleSound(explosionsSound, 0.2f);\n            }\n        }\n\n        // Diese Methode sucht nach dem GameController\n        // Wenn einer gefunden wird, wird eine Referenz darauf zur\u00fcckgegeben.\n        // Wenn kein GameController vorhanden ist, wird das Spiel mit einer Fehlermeldung beendet.\n        private GameController FindeGameController() {\n\n            GameObject gameControllerObject = GameObject.FindWithTag(\"GameController\");\n\n            //Befindet sich kein GameController im Spiel ist gameControllerObject == null\n            if (gameControllerObject != null)\n            {\n                return gameControllerObject.GetComponent&lt;GameController&gt;();\n            }\n            else\n            {\n                Debug.LogError(\"Cannot find GameController Script\");\n                Application.Quit();\n                return null;\n            }\n        }\n    }\n</code></pre>"},{"location":"spaceasteroids/T02-particles1/","title":"Partikelsysteme erstellen","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du was Partikelsysteme (particles) sind und wof\u00fcr sie verwendet werden. Au\u00dferdem wirst du f\u00fcr das Spiel Space-Asteroids einen Partikeleffekt f\u00fcr den Raketenantrieb des Raumschiffs erstellen.</p> <p>Partikelsysteme werden in Computerspielen f\u00fcr zum Beispiel folgende Dinge verwendet:</p> <ul> <li>Fl\u00fcssigkeiten (Wasserf\u00e4lle, Fl\u00fcssigkeitsspritzer)</li> <li>Explosionen</li> <li>Feuer</li> <li>Rauch, Dampf, Nebel</li> <li>Feuerwerk</li> </ul> <p> </p>"},{"location":"spaceasteroids/T02-particles1/#funktionsweise","title":"Funktionsweise","text":"<p>Die Funktionsweise ist dabei ganz einfach. Ein Partikelsystem besteht aus Partikeln und einem sogenannten Emitter.</p>"},{"location":"spaceasteroids/T02-particles1/#partikel","title":"Partikel","text":"<p>Partikel sind kleine Sprites oder 3D Objekte. In der oben zu sehenden Explosion ist zum Beispiel jeder einzelne Funke ein Partikel. Au\u00dferdem besteht der Rauch auch aus ganz vielen kleinen grauen Sprites.</p>"},{"location":"spaceasteroids/T02-particles1/#emitter","title":"Emitter","text":"<p>Die Aufgabe des Emitters (to emit = aussto\u00dfen) ist es, ganz viele Partikel nach einem bestimmten Schema auszusto\u00dfen um damit den Effekt zu erzielen. Im oben zu sehenden Feuer st\u00f6\u00dft der Emitter ganz viele kleine orange Partikel f\u00fcr das Feuer aus. Wenn diese sich \u00fcberlappen, werden sie heller. Damit wird der Flammeneffekt erzeugt.</p> <p>Hinweis</p> <p>In Unity gibt es f\u00fcr den Emitter keine eigene Komponente, er ist Teil der Komponente Particle System</p>"},{"location":"spaceasteroids/T02-particles1/#erstellung-eines-partikelsystems-in-unity","title":"Erstellung eines Partikelsystems in Unity","text":"<p>Nun wirst du dein eigenes Partikelsystem f\u00fcr den Raketenantrieb des Raumschiffs im Spiel Space-Asteroids erstellen.</p> <p>Falls du das Tutorial Programmierung der Asteroiden schon absolviert hast, verwende nun dieses Unityprojekt, ansonsten kannst du dir hier das Projekt herunterladen.</p>"},{"location":"spaceasteroids/T02-particles1/#1-erstelle-ein-neues-partikelsystem","title":"1. Erstelle ein neues Partikelsystem.","text":"<p>Klicke daf\u00fcr In der Hierarchy mit der rechten Maustaste auf das Objekt Player und anschlie\u00dfend Particle System</p> <p>Damit erstellst du ein Partikelsystem als Unterobjekt von Player. Wenn sich nun das Raumschiff bewegt, bewegt sich das Partikelsystem automatisch mit.</p> <p>Nun siehst du in der Sceneview dein neues Partikelsystem und es st\u00f6\u00dft bereits wei\u00dfe Partikel aus.</p> <p></p> <p>Stelle nun die Rotation auf x=270, y=0, y0 damit die Partikel aus dem Triebwerk hinaus nach hinten fliegen.</p>"},{"location":"spaceasteroids/T02-particles1/#2-material-erstellen","title":"2. Material erstellen","text":"<p>Erstelle als n\u00e4chstes im Assetbereich im Ordner Materials ein neues Material und benenne dieses Material Raketenantrieb.</p> <p></p> <p>W\u00e4hle nun im Inspector bei Shader die Option Particles-&gt;Additive. Dies bedeutet, dass die Helligkeitswerte addiert werden, falls mehrere Partikel \u00fcbereinander liegen. Dadurch werden die Flammen in der Mitte, wo sich viele Partikel \u00fcberlappen, heller.</p> <p>Klicke dann bei Particle Texture auf select und w\u00e4hle Default-Particle.</p> <p></p>"},{"location":"spaceasteroids/T02-particles1/#3-partikelsystemeinstellungen","title":"3. Partikelsystemeinstellungen","text":"<p>Klicke in der Hierarchy wieder auf das Partikelsystem.</p> <p>Nimm nun im Inspector folgende Einstellungen vor:</p> <ol> <li>Klicke auf Shape und stelle Shape von Cone auf Box um und stelle anschlie\u00dfend in der Transform die Skalierung auf x=0.2, y=0.5, z=0.5 um die Gr\u00f6\u00dfe der Box aus denen die Partikel austreten an die Triebwerke des Raumschiffs anzupassen.</li> <li>Stelle nun<ul> <li>Start Lifetime auf 0.2</li> <li>Start Speed auf 20</li> <li>Start Size auf 5</li> <li>Start Color auf Orange</li> </ul> </li> </ol> <p> 3. Um nun die Anzahl der Partikel zu erh\u00f6hen, klicke auf Emission und gib bei Rate over Time 100 ein. 4. Stelle nun noch ein, dass die Partikel Anfangs gro\u00df sind und dann immer kleiner werden, indem du einen Haken bei Size over Lifetime setzt und dann die Kurve ausw\u00e4hlst, die von links oben nach rechts unten geht.  5. Zum Schluss w\u00e4hle ganz unten im Punkt Renderer das zuvor erstellte Material aus. </p> <p>Fertig ist der Raketenantriebs-effekt! </p>"},{"location":"spaceasteroids/T02-particles1/#weiterfuhrende-resourcen","title":"Weiterf\u00fchrende Resourcen","text":"<p>https://unity3d.com/de/learn/tutorials/topics/graphics/particle-system</p>"},{"location":"spaceasteroids/T03-particles2/","title":"Fertige Partikelsysteme verwenden","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du wie du die vorgefertigten Partikelsystem von Unity importierst und wie du sie in deinem Spiel verwenden kannst.</p> <p>Falls du die Tutorials Programmierung der Asteroiden und Partikelsysteme erstellen schon absolviert hast, verwende nun dieses Unityprojekt, ansonsten kannst du dir hier das Projekt herunterladen.</p>"},{"location":"spaceasteroids/T03-particles2/#particle-package-importierten","title":"Particle-Package importierten","text":"<p>Unity hat standardm\u00e4\u00dfig schon eine Reihe von tollen Extrapackages eingebaut, die man ganz einfach f\u00fcr die eigenen Spiele verwenden kann. So zum Beispiel auch ein Particle-Package.</p> <p>Um das Package zu importieren klicke auf Assets-&gt;Import Package-&gt;ParticleSystems. Nach einigen Sekunden \u00f6ffnet sich ein Fenster, klicke dort auf import.</p> <p>Wenn der Import abgeschlossen ist, findest du im Assetsbereich einen neuen Ordner namens Standard Assets</p> <p>Navigiere dort in den Unterordner Standard Assets-&gt;ParticleSystems-&gt;Prefabs. In diesem Ordner sind die Vorlagen (Prefabs) f\u00fcr Spielobjekte, welche die enstprechenden Partikelsysteme enthalten.</p> <p>Probiere einfach einmal ein paar aus, indem du sie in deine Sceneview oder die Hierarchy ziehst.</p> <p></p> <p>L\u00f6sche dann die nicht ben\u00f6tigten Objekte wieder aus der Hierarchy.</p>"},{"location":"spaceasteroids/T03-particles2/#explosionen-ins-spiel-einbauen","title":"Explosionen ins Spiel einbauen","text":"<p>Nun wollen wir die vorgefertigte Explosion ins Spiel einbauen. Jedes Mal wenn ein Asteroid oder das Raumschiff der Spielerin/des Spielers zerst\u00f6rt wird soll eine Explosion erzeugt werden.</p> <p>Alles was du daf\u00fcr tun musst, ist:</p> <ol> <li>\u00d6ffne die Scripts PlayerController und Asteroid</li> <li>Erstelle in beiden Scripts jeweils eine public Variable vom Typ GameObject mit dem Namen explosionseffekt</li> <li>Nun kannst du mit dem Befehl <code>Instantiate(explosionseffekt, transform.position, Quaternion.identity);</code> eine neue Instanz des Explosionseffekts erzeugen. F\u00fcge diesen Befehl in beiden Scripts in die Methode OnTriggerEnter so ein, dass eine Explosion erzeugt wird, wenn das Raumschiff, bzw. der Asteroid zerst\u00f6rt wird.</li> <li>Speichere das Skript, gehe wieder zu Unity.</li> <li>W\u00e4hle das Player Objekt in der Hierarchy aus und weise im Inspector der Variable explosionseffekt die Vorlage Explosion zu. </li> <li>W\u00e4hle die Vorlage Asteroid (Assets-&gt;Vorlagen) aus und weise der Variable explosionseffekt die Vorlage ExplosionMobile zu. </li> </ol> <p>Fertig!</p> <p></p>"},{"location":"spaceasteroids/T04-deployToMobile/","title":"Spiele f\u00fcr Android exportieren","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du wie du ein Unity Projekt f\u00fcr Android ver\u00f6ffentlichst.</p>"},{"location":"spaceasteroids/T04-deployToMobile/#voraussetzungen","title":"Voraussetzungen","text":"<p>Android SDK, sowie Java JDK 1.8 (H\u00f6here Versionen werden zur Zeit nicht ohne weiteres unterst\u00fctzt) m\u00fcssen installiert sein.   Wichtig: In Unity muss unter Edit-&gt;Preferences der Pfad zu diesen Paketen angegegeben werden.</p>"},{"location":"spaceasteroids/T04-deployToMobile/#zielplatform-andern","title":"Zielplatform \u00e4ndern","text":"<p>Gehe zu File-&gt;Build Settings und w\u00e4hle als Platform Android aus.</p>"},{"location":"spaceasteroids/T04-deployToMobile/#live-testen-mit-unity-remote","title":"Live Testen mit Unity-Remote","text":"<p>Wenn du dein Spiel w\u00e4hrend dem arbeiten auf dem Smartphone testen willst, kannst du die Unity-Remote App auf deinem Smartphone installieren. (Die App Findest du im PlayStore)</p> <p>Damit die App funtkioniert musst du allerdings USB-Debugging auf deinem Android-Smartphone aktivieren. Au\u00dferdem musst du unter Edit-&gt;Project Settings-&gt;Editor bei Device Any Anrdoid Device einstellen. Starte danach Unity neu.</p> <p>Wenn du nun Play dr\u00fcckst, dein Smartphone an den PC angeschlossen ist und die Unity-Remote l\u00e4uft, sollte das Spiel auch auf deinem Smartphone laufen.</p>"},{"location":"spaceasteroids/T04-deployToMobile/#spiel-exportieren","title":"Spiel exportieren","text":"<p>Um das Spiel nun f\u00fcr das Smartphone zu exportieren gehe wieder auf File-&gt;Build Settings. Klicke dann auf Player Settings und gib einen Companyname und Productname f\u00fcr dein Spiel ein. Setze dann unter Other Settings den Package Name auf \"com.deinProductName.deinCompanyName\" (ohne Anf\u00fchrungszeichen)</p> <p>Stelle nun sicher, dass die Spielszene in Scenes in Build eingef\u00fcgt ist. </p> <p>Nun kannst du auf Build and Run klicken um das Spiel zu erstellen und auf dein Smartphone zu laden.</p> <p>H\u00e4ufige Fehler, weshalb das exportieren nicht funktioniert: * Packagename nicht richtig gesetzt * Android-SDK, JDK nicht installiert bzw. Pfad nicht oder falsch gesetzt * USB-Debugging ist am Smartphone nicht aktiviert</p> <p>Wenn alles funktioniert, sollte dein Spiel nun am Smartphone laufen. Allerdings hast du noch keine M\u00f6glichkeit das Raumschiff zu steuern. Darum k\u00fcmmern wir uns im n\u00e4chsten Kapitel.</p>"},{"location":"spaceasteroids/T05-mobileControls/","title":"Touchscreen Steuerung","text":"<p>Lernziele</p> <p>In diesem Kapitel lernst du wie du Touchscreen-Eingaben in Unity verwenden kannst und das Raumschiff mit einem Touchscreen-Joystick steuerst.</p>"},{"location":"spaceasteroids/T05-mobileControls/#touchjoystick-erstellen","title":"Touchjoystick erstellen","text":"<p>\u00d6ffne den AssetManager in Unity (Window-&gt;AssetManager) und suche das gratis Paket Simple Touch Controller, lade es herunter und importiere es in dein Projekt.</p> <p>Hinweis</p> <p>Nicht alle Assets im Assetstore sind gratis!</p> <p>Du solltest nun einen Ordner SimpleTouchController in deinem Assetbereich haben.</p> <p>Erzeuge einen neuen Canvas. (Rechte Maustaste in der Hierarchy UI-&gt;Canvas)</p> <p>Gehe in den Assets nun zu SimpleTouchController-&gt;Prefabs. Dort findest du die Vorlage SimpleTouch Joystick. Ziehe diesen auf das vorhin erzeugte Canvas-Objekt.</p> <p></p> <p>Damit der Joystick etwas gr\u00f6\u00dfer wird, stelle die Scalierung auf allen Achsen auf 2.</p>"},{"location":"spaceasteroids/T05-mobileControls/#joysticksteuerung-implementieren","title":"Joysticksteuerung implementieren","text":"<p>\u00d6ffne das PlayerController Script.</p> <p>In der FixedUpdate()-Methode befindet sich der Code f\u00fcr die Steuerung der Bewegung des Raumschiffs.</p> <p>Die wichtigen Zeilen sind diese: <pre><code>      //Setze die Geschwindigkeit\n      float geschwindigkeitHorizontal = Input.GetAxis(\"Horizontal\") * maxGeschwindigkeit;\n      float geschwindigkeitVertikal = Input.GetAxis(\"Vertical\") * maxGeschwindigkeit;\n      rb.velocity = new Vector3(geschwindigkeitHorizontal, 0.0f, geschwindigkeitVertikal);\n</code></pre> Im Moment macht der Code folgendes: Er nimmt die Werte der in Unity eingestellten Eingabeachsen \"Horizontal\" und \"Vertikal\" und multipliziert diese mit maxGeschwindigkeit (Die Werte der Eingabeachsen sind immer zwischen -1 und 1). Wir wollen dies nun so \u00e4ndern, dass anstatt der Eingabeachsen Input von dem Joystick verwendet werden.</p> <p>Lege daf\u00fcr oben im Script, bei den Deklarationen der Objektvariablen, eine neue public Variable vom Typ SimpleTouchController an und gib ihr einen sinnvollen Namen.</p> <p>z.B. <pre><code>public SimpleTouchController joystick;\n</code></pre></p> <p>Die Klasse SimpleTouchController hat eine Methode GetTouchPosition() vom Typ Vector2. Diese gibt uns x und y Werte zwischen -1 und 1 abh\u00e4ngig davon, wo wir den Joystick hinziehen. Verwende diese Methode nun statt Input.GetAxis() in FixedUpdate.</p> <pre><code>//Setze die Geschwindigkeit\nfloat geschwindigkeitHorizontal = joystick.GetTouchPosition.x * maxGeschwindigkeit;\nfloat geschwindigkeitVertikal = joystick.GetTouchPosition.y * maxGeschwindigkeit;\nrb.velocity = new Vector3(geschwindigkeitHorizontal, 0.0f, geschwindigkeitVertikal);\n</code></pre> <p>Nun musst du nur noch in Unity die Variable f\u00fcr den joystick im PlayerControllerScript zuvor erstellten Joystick-GameObject verkn\u00fcpfen.</p> <p></p>"},{"location":"tables/comparisonoperators/","title":"Comparisonoperators","text":"Vergleichsoperator Bedeutung == ist gleich != ist ungleich &gt; ist gr\u00f6\u00dfer als &gt; ist kleiner als &gt;= ist gr\u00f6\u00dfer gleich &lt;= ist kleiner gleich"},{"location":"tables/datatypes/","title":"Datatypes","text":"Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 31-bit Float (Gleitkommazahlen) -3,410hoch38 bis 3,410hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,010hoch-324 bis (+/-)1,710hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null"},{"location":"teachers/0300-teachers/","title":"F\u00fcr Lehrpersonen","text":""},{"location":"teachers/0300-teachers/#lernergebnis-strukturmodell","title":"Lernergebnis Strukturmodell","text":"<p>Voraussetzungen: DigiKomp(DK) 3.1, 3.3 </p> <p>Inhalte:</p> <ul> <li> <p>Objekt-orientierte Programmierung</p> <ul> <li>Datenstrukturen<ul> <li>Variablen</li> <li>Datentypen</li> <li>Operatoren</li> </ul> </li> <li>Kontrollstrukturen<ul> <li>Verzweigungen</li> <li>Schleifen</li> <li>Bereiche und Zugriffskontrolle</li> </ul> </li> <li>Objekte<ul> <li>Funktionen</li> <li>Klassen (Erzeugung, Kapselung, Vererbung)</li> </ul> </li> <li>Automatentheorie<ul> <li>Objekt-Zust\u00e4nde</li> </ul> </li> </ul> </li> <li> <p>Pr\u00e4sentation</p> <ul> <li>Programmierstil<ul> <li>Bedeutungsvolle Bezeichnungen</li> <li>Programmierkonventionen</li> </ul> </li> </ul> </li> <li> <p>Kognitive Prozesse</p> <ul> <li>Probleml\u00f6sungsorientierung<ul> <li>Verwendung von Algorithmen</li> <li>Testen</li> <li>De-Buggen</li> </ul> </li> <li>Lesen (Interpretation von Programmfunktionalit\u00e4t)</li> <li>Implementierung (Entwicklung von ausf\u00fchrbaren Programmen)</li> </ul> </li> <li> <p>Meta-Kognitive Prozesse</p> <ul> <li>Teamarbeit<ul> <li>Gemeinsam Probleme l\u00f6sen</li> <li>Gemeinsam Ideen umsetzen</li> <li>Arbeitsteilung</li> </ul> </li> <li>Selbstbestimmung<ul> <li>Weiterf\u00fchrende Entwicklung von Anwendungen</li> <li>Verwendung von Dokumentation</li> </ul> </li> <li>Kreativit\u00e4t<ul> <li>Originalit\u00e4t</li> </ul> </li> </ul> </li> </ul> <p>Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4</p> <p>Siehe auch:</p> <p>Kramer, M., Hubwieser, P., &amp; Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE.</p>"},{"location":"teachers/0300-teachers/#unterrichtsmethoden","title":"Unterrichtsmethoden","text":""},{"location":"teachers/0300-teachers/#zusatzliche-unterrichtsmaterialien","title":"Zus\u00e4tzliche Unterrichtsmaterialien","text":""},{"location":"teachers/0300-teachers/#c-cheatsheet","title":"C#-Cheatsheet","text":"<p>In diesem Dokument sind grundlegende Informationen und Befehle f\u00fcr die Programmierung in C# zusammengefasst. Es ist f\u00fcr die Verwendung im Unterricht zum Einstieg in die Konsolenprogrammierung mit C# konzipiert.  </p> <p>Die Sch\u00fcler_innen finden hier \u00fcbersichtlich zusammengefasst Informationen und Beispiele zu:</p> <ul> <li>Datentypen</li> <li>Variablen</li> <li>Kommentare</li> <li>Operatoren</li> <li>Befehle zur Ein-/Ausgabe \u00fcber die Konsole</li> <li>Kontrollstrukuren</li> </ul> <p>Link zum Cheatsheet</p>"},{"location":"teachers/0300-teachers/#case-studies","title":"Case Studies","text":""}]}